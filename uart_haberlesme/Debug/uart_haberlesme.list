
uart_haberlesme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  20000014  08003bfc  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000170  08003bfc  00020170  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a31e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000185e  00000000  00000000  0002a35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000808  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000770  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004455  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027c9  00000000  00000000  00030f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003374e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ba0  00000000  00000000  000337cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b54 	.word	0x08003b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003b54 	.word	0x08003b54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4351      	muls	r1, r2
 8000298:	4343      	muls	r3, r0
 800029a:	0436      	lsls	r6, r6, #16
 800029c:	0c36      	lsrs	r6, r6, #16
 800029e:	0c25      	lsrs	r5, r4, #16
 80002a0:	0424      	lsls	r4, r4, #16
 80002a2:	4465      	add	r5, ip
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	1859      	adds	r1, r3, r1
 80002a8:	1949      	adds	r1, r1, r5
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	464e      	mov	r6, r9
 80002ba:	4645      	mov	r5, r8
 80002bc:	46de      	mov	lr, fp
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	0004      	movs	r4, r0
 80002c2:	b083      	sub	sp, #12
 80002c4:	000d      	movs	r5, r1
 80002c6:	4692      	mov	sl, r2
 80002c8:	4699      	mov	r9, r3
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d82f      	bhi.n	800032e <__udivmoddi4+0x7a>
 80002ce:	d02c      	beq.n	800032a <__udivmoddi4+0x76>
 80002d0:	4649      	mov	r1, r9
 80002d2:	4650      	mov	r0, sl
 80002d4:	f000 f8ae 	bl	8000434 <__clzdi2>
 80002d8:	0029      	movs	r1, r5
 80002da:	0006      	movs	r6, r0
 80002dc:	0020      	movs	r0, r4
 80002de:	f000 f8a9 	bl	8000434 <__clzdi2>
 80002e2:	1a33      	subs	r3, r6, r0
 80002e4:	4698      	mov	r8, r3
 80002e6:	3b20      	subs	r3, #32
 80002e8:	469b      	mov	fp, r3
 80002ea:	d500      	bpl.n	80002ee <__udivmoddi4+0x3a>
 80002ec:	e074      	b.n	80003d8 <__udivmoddi4+0x124>
 80002ee:	4653      	mov	r3, sl
 80002f0:	465a      	mov	r2, fp
 80002f2:	4093      	lsls	r3, r2
 80002f4:	001f      	movs	r7, r3
 80002f6:	4653      	mov	r3, sl
 80002f8:	4642      	mov	r2, r8
 80002fa:	4093      	lsls	r3, r2
 80002fc:	001e      	movs	r6, r3
 80002fe:	42af      	cmp	r7, r5
 8000300:	d829      	bhi.n	8000356 <__udivmoddi4+0xa2>
 8000302:	d026      	beq.n	8000352 <__udivmoddi4+0x9e>
 8000304:	465b      	mov	r3, fp
 8000306:	1ba4      	subs	r4, r4, r6
 8000308:	41bd      	sbcs	r5, r7
 800030a:	2b00      	cmp	r3, #0
 800030c:	da00      	bge.n	8000310 <__udivmoddi4+0x5c>
 800030e:	e079      	b.n	8000404 <__udivmoddi4+0x150>
 8000310:	2200      	movs	r2, #0
 8000312:	2300      	movs	r3, #0
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2301      	movs	r3, #1
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	2301      	movs	r3, #1
 8000322:	4642      	mov	r2, r8
 8000324:	4093      	lsls	r3, r2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	e019      	b.n	800035e <__udivmoddi4+0xaa>
 800032a:	4282      	cmp	r2, r0
 800032c:	d9d0      	bls.n	80002d0 <__udivmoddi4+0x1c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <__udivmoddi4+0x8c>
 800033c:	601c      	str	r4, [r3, #0]
 800033e:	605d      	str	r5, [r3, #4]
 8000340:	9800      	ldr	r0, [sp, #0]
 8000342:	9901      	ldr	r1, [sp, #4]
 8000344:	b003      	add	sp, #12
 8000346:	bc3c      	pop	{r2, r3, r4, r5}
 8000348:	4690      	mov	r8, r2
 800034a:	4699      	mov	r9, r3
 800034c:	46a2      	mov	sl, r4
 800034e:	46ab      	mov	fp, r5
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	42a3      	cmp	r3, r4
 8000354:	d9d6      	bls.n	8000304 <__udivmoddi4+0x50>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0e8      	beq.n	8000336 <__udivmoddi4+0x82>
 8000364:	07fb      	lsls	r3, r7, #31
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	431a      	orrs	r2, r3
 800036a:	4646      	mov	r6, r8
 800036c:	087b      	lsrs	r3, r7, #1
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	465b      	mov	r3, fp
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db22      	blt.n	80003f0 <__udivmoddi4+0x13c>
 80003aa:	002b      	movs	r3, r5
 80003ac:	465a      	mov	r2, fp
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4644      	mov	r4, r8
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	465b      	mov	r3, fp
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2c      	blt.n	800041a <__udivmoddi4+0x166>
 80003c0:	0026      	movs	r6, r4
 80003c2:	409e      	lsls	r6, r3
 80003c4:	0033      	movs	r3, r6
 80003c6:	0026      	movs	r6, r4
 80003c8:	4647      	mov	r7, r8
 80003ca:	40be      	lsls	r6, r7
 80003cc:	0032      	movs	r2, r6
 80003ce:	1a80      	subs	r0, r0, r2
 80003d0:	4199      	sbcs	r1, r3
 80003d2:	9000      	str	r0, [sp, #0]
 80003d4:	9101      	str	r1, [sp, #4]
 80003d6:	e7ae      	b.n	8000336 <__udivmoddi4+0x82>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	4652      	mov	r2, sl
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	4641      	mov	r1, r8
 80003e4:	0013      	movs	r3, r2
 80003e6:	464a      	mov	r2, r9
 80003e8:	408a      	lsls	r2, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	431f      	orrs	r7, r3
 80003ee:	e782      	b.n	80002f6 <__udivmoddi4+0x42>
 80003f0:	4642      	mov	r2, r8
 80003f2:	2320      	movs	r3, #32
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	002a      	movs	r2, r5
 80003f8:	4646      	mov	r6, r8
 80003fa:	409a      	lsls	r2, r3
 80003fc:	0023      	movs	r3, r4
 80003fe:	40f3      	lsrs	r3, r6
 8000400:	4313      	orrs	r3, r2
 8000402:	e7d5      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000404:	4642      	mov	r2, r8
 8000406:	2320      	movs	r3, #32
 8000408:	2100      	movs	r1, #0
 800040a:	1a9b      	subs	r3, r3, r2
 800040c:	2200      	movs	r2, #0
 800040e:	9100      	str	r1, [sp, #0]
 8000410:	9201      	str	r2, [sp, #4]
 8000412:	2201      	movs	r2, #1
 8000414:	40da      	lsrs	r2, r3
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	e782      	b.n	8000320 <__udivmoddi4+0x6c>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	0026      	movs	r6, r4
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	40de      	lsrs	r6, r3
 8000424:	002f      	movs	r7, r5
 8000426:	46b4      	mov	ip, r6
 8000428:	4097      	lsls	r7, r2
 800042a:	4666      	mov	r6, ip
 800042c:	003b      	movs	r3, r7
 800042e:	4333      	orrs	r3, r6
 8000430:	e7c9      	b.n	80003c6 <__udivmoddi4+0x112>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__clzdi2>:
 8000434:	b510      	push	{r4, lr}
 8000436:	2900      	cmp	r1, #0
 8000438:	d103      	bne.n	8000442 <__clzdi2+0xe>
 800043a:	f000 f807 	bl	800044c <__clzsi2>
 800043e:	3020      	adds	r0, #32
 8000440:	e002      	b.n	8000448 <__clzdi2+0x14>
 8000442:	1c08      	adds	r0, r1, #0
 8000444:	f000 f802 	bl	800044c <__clzsi2>
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__clzsi2>:
 800044c:	211c      	movs	r1, #28
 800044e:	2301      	movs	r3, #1
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0xe>
 8000456:	0c00      	lsrs	r0, r0, #16
 8000458:	3910      	subs	r1, #16
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	4298      	cmp	r0, r3
 800045e:	d301      	bcc.n	8000464 <__clzsi2+0x18>
 8000460:	0a00      	lsrs	r0, r0, #8
 8000462:	3908      	subs	r1, #8
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0x22>
 800046a:	0900      	lsrs	r0, r0, #4
 800046c:	3904      	subs	r1, #4
 800046e:	a202      	add	r2, pc, #8	; (adr r2, 8000478 <__clzsi2+0x2c>)
 8000470:	5c10      	ldrb	r0, [r2, r0]
 8000472:	1840      	adds	r0, r0, r1
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	02020304 	.word	0x02020304
 800047c:	01010101 	.word	0x01010101
	...

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048c:	f000 fba0 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000490:	f000 f85c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000494:	f000 f924 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000498:	f000 f904 	bl	80006a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800049c:	f000 f8d2 	bl	8000644 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 //  HAL_UART_Receive_IT(&huart2,&myRxData,20);
 //  HAL_UART_Receive_DMA(&huart2,&myTxData,11);

  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <main+0xb8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a26      	ldr	r2, [pc, #152]	; (8000540 <main+0xb8>)
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	6812      	ldr	r2, [r2, #0]
 80004aa:	2120      	movs	r1, #32
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart2,&myRxData,9);
 80004b0:	4924      	ldr	r1, [pc, #144]	; (8000544 <main+0xbc>)
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <main+0xb8>)
 80004b4:	2209      	movs	r2, #9
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 f894 	bl	80025e4 <HAL_UART_Receive_IT>
	  //HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);

		  	 // HAL_UART_Transmit(&huart2,&myTxData, 13, 10);

		    //HAL_UART_Transmit(&huart2,&myRxData[myRx_sayac],13,10);
	    	HAL_UART_Transmit(&huart2,&myRxData[0],9,10);
 80004bc:	4921      	ldr	r1, [pc, #132]	; (8000544 <main+0xbc>)
 80004be:	4820      	ldr	r0, [pc, #128]	; (8000540 <main+0xb8>)
 80004c0:	230a      	movs	r3, #10
 80004c2:	2209      	movs	r2, #9
 80004c4:	f001 ffe6 	bl	8002494 <HAL_UART_Transmit>
	    	myRxData[0] = myRxData[0] ;
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <main+0xbc>)
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <main+0xbc>)
 80004ce:	701a      	strb	r2, [r3, #0]
	    	myRxData[1] = myRxData[1] ;
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <main+0xbc>)
 80004d2:	785a      	ldrb	r2, [r3, #1]
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <main+0xbc>)
 80004d6:	705a      	strb	r2, [r3, #1]
	    	myRxData[2] = myRxData[2] ;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <main+0xbc>)
 80004da:	789a      	ldrb	r2, [r3, #2]
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <main+0xbc>)
 80004de:	709a      	strb	r2, [r3, #2]
	    	myRxData[3] = myRxData[3] ;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <main+0xbc>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0xbc>)
 80004e6:	70da      	strb	r2, [r3, #3]
	    	myRxData[4] = myRxData[4] ;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <main+0xbc>)
 80004ea:	791a      	ldrb	r2, [r3, #4]
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <main+0xbc>)
 80004ee:	711a      	strb	r2, [r3, #4]
	    	myRxData[5] = myRxData[5] ;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <main+0xbc>)
 80004f2:	795a      	ldrb	r2, [r3, #5]
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <main+0xbc>)
 80004f6:	715a      	strb	r2, [r3, #5]
	    	myRxData[6] = myRxData[6] ;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <main+0xbc>)
 80004fa:	799a      	ldrb	r2, [r3, #6]
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <main+0xbc>)
 80004fe:	719a      	strb	r2, [r3, #6]
		    myRx_sayac++;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0xc0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <main+0xc0>)
 800050a:	701a      	strb	r2, [r3, #0]


	       HAL_Delay(500);
 800050c:	23fa      	movs	r3, #250	; 0xfa
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fbcd 	bl	8000cb0 <HAL_Delay>
	      // dizi_sinirlama(8);
	   if(myRxData[0]==59)//;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <main+0xbc>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b3b      	cmp	r3, #59	; 0x3b
 800051c:	d1ce      	bne.n	80004bc <main+0x34>
	   {
		   led(0);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f9aa 	bl	8000878 <led>
		   bekle_flag_fonksiyon();
 8000524:	f000 f924 	bl	8000770 <bekle_flag_fonksiyon>
		   step_flag();
 8000528:	f000 f97a 	bl	8000820 <step_flag>
		   frekans_flag();
 800052c:	f000 f98e 	bl	800084c <frekans_flag>
		   tur_flag();
 8000530:	f000 f9d6 	bl	80008e0 <tur_flag>
		   saniye_flag();
 8000534:	f000 f9be 	bl	80008b4 <saniye_flag>
		   adim_dondur();
 8000538:	f000 f9e8 	bl	800090c <adim_dondur>
	    	HAL_UART_Transmit(&huart2,&myRxData[0],9,10);
 800053c:	e7be      	b.n	80004bc <main+0x34>
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	200000e0 	.word	0x200000e0
 8000544:	20000000 	.word	0x20000000
 8000548:	20000030 	.word	0x20000030

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b09c      	sub	sp, #112	; 0x70
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	2338      	movs	r3, #56	; 0x38
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	0018      	movs	r0, r3
 8000558:	2338      	movs	r3, #56	; 0x38
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f003 faf1 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	2324      	movs	r3, #36	; 0x24
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 fae9 	bl	8003b44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000572:	003b      	movs	r3, r7
 8000574:	0018      	movs	r0, r3
 8000576:	2324      	movs	r3, #36	; 0x24
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f003 fae2 	bl	8003b44 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <SystemClock_Config+0xf0>)
 8000582:	4a2e      	ldr	r2, [pc, #184]	; (800063c <SystemClock_Config+0xf0>)
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	492e      	ldr	r1, [pc, #184]	; (8000640 <SystemClock_Config+0xf4>)
 8000588:	400a      	ands	r2, r1
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	0109      	lsls	r1, r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2338      	movs	r3, #56	; 0x38
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059a:	2338      	movs	r3, #56	; 0x38
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	0252      	lsls	r2, r2, #9
 80005a2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2338      	movs	r3, #56	; 0x38
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	2202      	movs	r2, #2
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ac:	2338      	movs	r3, #56	; 0x38
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80005b6:	2338      	movs	r3, #56	; 0x38
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	22c0      	movs	r2, #192	; 0xc0
 80005bc:	0312      	lsls	r2, r2, #12
 80005be:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005c0:	2338      	movs	r3, #56	; 0x38
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	03d2      	lsls	r2, r2, #15
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	2338      	movs	r3, #56	; 0x38
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 ffcc 	bl	800156c <HAL_RCC_OscConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005d8:	f000 f9ee 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	2324      	movs	r3, #36	; 0x24
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	220f      	movs	r2, #15
 80005e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2324      	movs	r3, #36	; 0x24
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2203      	movs	r2, #3
 80005ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2324      	movs	r3, #36	; 0x24
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2324      	movs	r3, #36	; 0x24
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2324      	movs	r3, #36	; 0x24
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000604:	2324      	movs	r3, #36	; 0x24
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	2101      	movs	r1, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fb70 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000614:	f000 f9d0 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000618:	003b      	movs	r3, r7
 800061a:	2202      	movs	r2, #2
 800061c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	003b      	movs	r3, r7
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fd82 	bl	8002130 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000630:	f000 f9c2 	bl	80009b8 <Error_Handler>
  }
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b01c      	add	sp, #112	; 0x70
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40007000 	.word	0x40007000
 8000640:	ffffe7ff 	.word	0xffffe7ff

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART2_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART2_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000650:	22e1      	movs	r2, #225	; 0xe1
 8000652:	0252      	lsls	r2, r2, #9
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000688:	0018      	movs	r0, r3
 800068a:	f001 feaf 	bl	80023ec <HAL_UART_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f991 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e0 	.word	0x200000e0
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DMA_Init+0x38>)
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <MX_DMA_Init+0x38>)
 80006ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_DMA_Init+0x38>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	200b      	movs	r0, #11
 80006c8:	f000 fbc0 	bl	8000e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006cc:	200b      	movs	r0, #11
 80006ce:	f000 fbd3 	bl	8000e78 <HAL_NVIC_EnableIRQ>

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	230c      	movs	r3, #12
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	2314      	movs	r3, #20
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f003 fa27 	bl	8003b44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_GPIO_Init+0x8c>)
 80006f8:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_GPIO_Init+0x8c>)
 80006fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_GPIO_Init+0x8c>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_GPIO_Init+0x8c>)
 8000710:	4a16      	ldr	r2, [pc, #88]	; (800076c <MX_GPIO_Init+0x8c>)
 8000712:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_GPIO_Init+0x8c>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fee4 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000734:	230c      	movs	r3, #12
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2220      	movs	r2, #32
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	230c      	movs	r3, #12
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	230c      	movs	r3, #12
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	230c      	movs	r3, #12
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	2202      	movs	r2, #2
 8000752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	230c      	movs	r3, #12
 8000756:	18fa      	adds	r2, r7, r3
 8000758:	23a0      	movs	r3, #160	; 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fd56 	bl	8001210 <HAL_GPIO_Init>

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b008      	add	sp, #32
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000

08000770 <bekle_flag_fonksiyon>:
	}

}

void bekle_flag_fonksiyon()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	if(myRxData[1]==55 )
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <bekle_flag_fonksiyon+0x44>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	2b37      	cmp	r3, #55	; 0x37
 800077a:	d118      	bne.n	80007ae <bekle_flag_fonksiyon+0x3e>
	{
		if (myRxData[2]==42 && myRxData[3]==42 && myRxData[4]==42 && myRxData[5]==42 && myRxData[6]==42)
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <bekle_flag_fonksiyon+0x44>)
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	2b2a      	cmp	r3, #42	; 0x2a
 8000782:	d114      	bne.n	80007ae <bekle_flag_fonksiyon+0x3e>
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <bekle_flag_fonksiyon+0x44>)
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	2b2a      	cmp	r3, #42	; 0x2a
 800078a:	d110      	bne.n	80007ae <bekle_flag_fonksiyon+0x3e>
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <bekle_flag_fonksiyon+0x44>)
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	2b2a      	cmp	r3, #42	; 0x2a
 8000792:	d10c      	bne.n	80007ae <bekle_flag_fonksiyon+0x3e>
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <bekle_flag_fonksiyon+0x44>)
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	2b2a      	cmp	r3, #42	; 0x2a
 800079a:	d108      	bne.n	80007ae <bekle_flag_fonksiyon+0x3e>
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <bekle_flag_fonksiyon+0x44>)
 800079e:	799b      	ldrb	r3, [r3, #6]
 80007a0:	2b2a      	cmp	r3, #42	; 0x2a
 80007a2:	d104      	bne.n	80007ae <bekle_flag_fonksiyon+0x3e>
		{
			led(7);
 80007a4:	2007      	movs	r0, #7
 80007a6:	f000 f867 	bl	8000878 <led>
			bitme_biti();
 80007aa:	f000 f805 	bl	80007b8 <bitme_biti>

		}

	}
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000000 	.word	0x20000000

080007b8 <bitme_biti>:

void bitme_biti()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if(myRxData[7]==13 && myRxData[8]==10)
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <bitme_biti+0x28>)
 80007be:	79db      	ldrb	r3, [r3, #7]
 80007c0:	2b0d      	cmp	r3, #13
 80007c2:	d107      	bne.n	80007d4 <bitme_biti+0x1c>
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <bitme_biti+0x28>)
 80007c6:	7a1b      	ldrb	r3, [r3, #8]
 80007c8:	2b0a      	cmp	r3, #10
 80007ca:	d103      	bne.n	80007d4 <bitme_biti+0x1c>
	{
		bitti_flag=1;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <bitme_biti+0x2c>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e002      	b.n	80007da <bitme_biti+0x22>

	}
	else{
		bitti_flag=0;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <bitme_biti+0x2c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
	}
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000031 	.word	0x20000031

080007e8 <veri_hesapla>:


void veri_hesapla(uint8_t veri[5])
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	 for(int i=2;i<7;i++)
 80007f0:	2302      	movs	r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e00b      	b.n	800080e <veri_hesapla+0x26>
	 {
		 veri[i-2]=myRxData[i];
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3b02      	subs	r3, #2
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	4907      	ldr	r1, [pc, #28]	; (800081c <veri_hesapla+0x34>)
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	188a      	adds	r2, r1, r2
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	701a      	strb	r2, [r3, #0]
	 for(int i=2;i<7;i++)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b06      	cmp	r3, #6
 8000812:	ddf0      	ble.n	80007f6 <veri_hesapla+0xe>
	 }
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b004      	add	sp, #16
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000

08000820 <step_flag>:
void step_flag()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	if(myRxData[1]==50 )
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <step_flag+0x24>)
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	2b32      	cmp	r3, #50	; 0x32
 800082a:	d108      	bne.n	800083e <step_flag+0x1e>
		{
			veri_hesapla(Gl_step);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <step_flag+0x28>)
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff ffda 	bl	80007e8 <veri_hesapla>
			led(2);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 f81f 	bl	8000878 <led>
			bitme_biti();
 800083a:	f7ff ffbd 	bl	80007b8 <bitme_biti>
		}
}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000084 	.word	0x20000084

0800084c <frekans_flag>:
void frekans_flag()
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	if(myRxData[1]==52 )
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <frekans_flag+0x24>)
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	2b34      	cmp	r3, #52	; 0x34
 8000856:	d108      	bne.n	800086a <frekans_flag+0x1e>
	{
		veri_hesapla(Gl_frekans);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <frekans_flag+0x28>)
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff ffc4 	bl	80007e8 <veri_hesapla>
		led(4);
 8000860:	2004      	movs	r0, #4
 8000862:	f000 f809 	bl	8000878 <led>
		bitme_biti();
 8000866:	f7ff ffa7 	bl	80007b8 <bitme_biti>
	}
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	200000d8 	.word	0x200000d8

08000878 <led>:

void led(uint8_t x)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<x;i++)
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e00b      	b.n	80008a2 <led+0x2a>
	{
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	2120      	movs	r1, #32
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fe50 	bl	8001536 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000896:	20c8      	movs	r0, #200	; 0xc8
 8000898:	f000 fa0a 	bl	8000cb0 <HAL_Delay>
	for(int i=0;i<x;i++)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dcee      	bgt.n	800088a <led+0x12>
	}
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b004      	add	sp, #16
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <saniye_flag>:

void saniye_flag()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	if(myRxData[1]==53 )
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <saniye_flag+0x24>)
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	2b35      	cmp	r3, #53	; 0x35
 80008be:	d108      	bne.n	80008d2 <saniye_flag+0x1e>
			{
				veri_hesapla(Gl_saniye);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <saniye_flag+0x28>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff ff90 	bl	80007e8 <veri_hesapla>
				led(5);
 80008c8:	2005      	movs	r0, #5
 80008ca:	f7ff ffd5 	bl	8000878 <led>
				bitme_biti();
 80008ce:	f7ff ff73 	bl	80007b8 <bitme_biti>
	       }
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000164 	.word	0x20000164

080008e0 <tur_flag>:

void tur_flag()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	if(myRxData[1]==56 )
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <tur_flag+0x24>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	2b38      	cmp	r3, #56	; 0x38
 80008ea:	d108      	bne.n	80008fe <tur_flag+0x1e>
		{
		  veri_hesapla(Gl_tur);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <tur_flag+0x28>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff ff7a 	bl	80007e8 <veri_hesapla>
		  led(8);
 80008f4:	2008      	movs	r0, #8
 80008f6:	f7ff ffbf 	bl	8000878 <led>
		  bitme_biti();
 80008fa:	f7ff ff5d 	bl	80007b8 <bitme_biti>
		}
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	2000007c 	.word	0x2000007c

0800090c <adim_dondur>:

void adim_dondur()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(myRxData[1]==56 )
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <adim_dondur+0x74>)
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	2b38      	cmp	r3, #56	; 0x38
 8000916:	d12c      	bne.n	8000972 <adim_dondur+0x66>
		{
		      Gl_adim_dondurme_flag=1;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <adim_dondur+0x78>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]

			  veri_hesapla(Gl_tur);
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <adim_dondur+0x7c>)
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff61 	bl	80007e8 <veri_hesapla>

			  if(Gl_tur[5]==82)
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <adim_dondur+0x7c>)
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	2b52      	cmp	r3, #82	; 0x52
 800092c:	d108      	bne.n	8000940 <adim_dondur+0x34>
			  {
				 Gl_sag_flag=1;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <adim_dondur+0x80>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
				 led(6);
 8000934:	2006      	movs	r0, #6
 8000936:	f7ff ff9f 	bl	8000878 <led>
				  bitme_biti();
 800093a:	f7ff ff3d 	bl	80007b8 <bitme_biti>
		}
	else{
		Gl_adim_dondurme_flag=0;
	}

}
 800093e:	e01b      	b.n	8000978 <adim_dondur+0x6c>
			  else if(Gl_tur[5]==76)
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <adim_dondur+0x7c>)
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	2b4c      	cmp	r3, #76	; 0x4c
 8000946:	d108      	bne.n	800095a <adim_dondur+0x4e>
				  Gl_sol_flag=1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <adim_dondur+0x84>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
				  led(6);
 800094e:	2006      	movs	r0, #6
 8000950:	f7ff ff92 	bl	8000878 <led>
				  bitme_biti();
 8000954:	f7ff ff30 	bl	80007b8 <bitme_biti>
}
 8000958:	e00e      	b.n	8000978 <adim_dondur+0x6c>
				  Gl_sag_flag=0;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <adim_dondur+0x80>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
				  Gl_sol_flag=0;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <adim_dondur+0x84>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
				  Gl_adim_dondurme_flag=0;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <adim_dondur+0x78>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
				  bitme_biti();
 800096c:	f7ff ff24 	bl	80007b8 <bitme_biti>
}
 8000970:	e002      	b.n	8000978 <adim_dondur+0x6c>
		Gl_adim_dondurme_flag=0;
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <adim_dondur+0x78>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000000 	.word	0x20000000
 8000984:	20000169 	.word	0x20000169
 8000988:	2000007c 	.word	0x2000007c
 800098c:	200000d5 	.word	0x200000d5
 8000990:	200000d4 	.word	0x200000d4

08000994 <HAL_UART_RxCpltCallback>:
uint8_t index_no;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,&myRxData,9);
 800099c:	4904      	ldr	r1, [pc, #16]	; (80009b0 <HAL_UART_RxCpltCallback+0x1c>)
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_UART_RxCpltCallback+0x20>)
 80009a0:	2209      	movs	r2, #9
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 fe1e 	bl	80025e4 <HAL_UART_Receive_IT>


}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	200000e0 	.word	0x200000e0

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009be:	e7fe      	b.n	80009be <Error_Handler+0x6>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_MspInit+0x34>)
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HAL_MspInit+0x34>)
 80009c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009ca:	2101      	movs	r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x34>)
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x34>)
 80009d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	0549      	lsls	r1, r1, #21
 80009da:	430a      	orrs	r2, r1
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2004      	movs	r0, #4
 80009e4:	f000 fa32 	bl	8000e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80009e8:	2004      	movs	r0, #4
 80009ea:	f000 fa45 	bl	8000e78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	230c      	movs	r3, #12
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f003 f89a 	bl	8003b44 <memset>
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a48      	ldr	r2, [pc, #288]	; (8000b38 <HAL_UART_MspInit+0x140>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d000      	beq.n	8000a1c <HAL_UART_MspInit+0x24>
 8000a1a:	e088      	b.n	8000b2e <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <HAL_UART_MspInit+0x144>)
 8000a1e:	4a47      	ldr	r2, [pc, #284]	; (8000b3c <HAL_UART_MspInit+0x144>)
 8000a20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0289      	lsls	r1, r1, #10
 8000a26:	430a      	orrs	r2, r1
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <HAL_UART_MspInit+0x144>)
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <HAL_UART_MspInit+0x144>)
 8000a2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <HAL_UART_MspInit+0x144>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a42:	230c      	movs	r3, #12
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	2202      	movs	r2, #2
 8000a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	230c      	movs	r3, #12
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	2203      	movs	r2, #3
 8000a60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a62:	230c      	movs	r3, #12
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	2204      	movs	r2, #4
 8000a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	18fa      	adds	r2, r7, r3
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fbcb 	bl	8001210 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_UART_MspInit+0x14c>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f9fe 	bl	8000eb4 <HAL_DMA_Init>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000abc:	f7ff ff7c 	bl	80009b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000ac4:	671a      	str	r2, [r3, #112]	; 0x70
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_UART_MspInit+0x148>)
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_UART_MspInit+0x154>)
 8000ad0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000ada:	2210      	movs	r2, #16
 8000adc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f9d5 	bl	8000eb4 <HAL_DMA_Init>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8000b0e:	f7ff ff53 	bl	80009b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000b16:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_UART_MspInit+0x150>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	201c      	movs	r0, #28
 8000b24:	f000 f992 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 f9a5 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b008      	add	sp, #32
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	20000034 	.word	0x20000034
 8000b44:	40020058 	.word	0x40020058
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	40020044 	.word	0x40020044

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f880 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fa90 	bl	80010b4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fa8c 	bl	80010b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000008c 	.word	0x2000008c
 8000ba8:	20000034 	.word	0x20000034

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <USART2_IRQHandler+0x14>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fd7c 	bl	80026b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	200000e0 	.word	0x200000e0

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x3c>)
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_Init+0x3c>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	430a      	orrs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f811 	bl	8000c10 <HAL_InitTick>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e001      	b.n	8000bfe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfa:	f7ff fee1 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c1a:	681c      	ldr	r4, [r3, #0]
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_InitTick+0x60>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	0019      	movs	r1, r3
 8000c22:	23fa      	movs	r3, #250	; 0xfa
 8000c24:	0098      	lsls	r0, r3, #2
 8000c26:	f7ff fa6f 	bl	8000108 <__udivsi3>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	0020      	movs	r0, r4
 8000c30:	f7ff fa6a 	bl	8000108 <__udivsi3>
 8000c34:	0003      	movs	r3, r0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f92e 	bl	8000e98 <HAL_SYSTICK_Config>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e00f      	b.n	8000c64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d80b      	bhi.n	8000c62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 f8fa 	bl	8000e4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_InitTick+0x64>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000010 	.word	0x20000010
 8000c74:	2000000c 	.word	0x2000000c

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	18d2      	adds	r2, r2, r3
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000010 	.word	0x20000010
 8000c98:	2000016c 	.word	0x2000016c

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000016c 	.word	0x2000016c

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_Delay+0x40>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	001a      	movs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	189b      	adds	r3, r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	f7ff ffe0 	bl	8000c9c <HAL_GetTick>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad2      	subs	r2, r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3f7      	bcc.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b004      	add	sp, #16
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000010 	.word	0x20000010

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b7f      	cmp	r3, #127	; 0x7f
 8000d06:	d809      	bhi.n	8000d1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <__NVIC_EnableIRQ+0x30>)
 8000d0a:	1dfa      	adds	r2, r7, #7
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	221f      	movs	r2, #31
 8000d12:	400a      	ands	r2, r1
 8000d14:	2101      	movs	r1, #1
 8000d16:	4091      	lsls	r1, r2
 8000d18:	000a      	movs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
  }
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d3c:	d828      	bhi.n	8000d90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3e:	4c2f      	ldr	r4, [pc, #188]	; (8000dfc <__NVIC_SetPriority+0xd4>)
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	492c      	ldr	r1, [pc, #176]	; (8000dfc <__NVIC_SetPriority+0xd4>)
 8000d4a:	1dfa      	adds	r2, r7, #7
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	b252      	sxtb	r2, r2
 8000d50:	0892      	lsrs	r2, r2, #2
 8000d52:	32c0      	adds	r2, #192	; 0xc0
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	5852      	ldr	r2, [r2, r1]
 8000d58:	1df9      	adds	r1, r7, #7
 8000d5a:	7809      	ldrb	r1, [r1, #0]
 8000d5c:	0008      	movs	r0, r1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	4001      	ands	r1, r0
 8000d62:	00c9      	lsls	r1, r1, #3
 8000d64:	20ff      	movs	r0, #255	; 0xff
 8000d66:	4088      	lsls	r0, r1
 8000d68:	0001      	movs	r1, r0
 8000d6a:	43c9      	mvns	r1, r1
 8000d6c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	0192      	lsls	r2, r2, #6
 8000d72:	20ff      	movs	r0, #255	; 0xff
 8000d74:	4010      	ands	r0, r2
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	0015      	movs	r5, r2
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	402a      	ands	r2, r5
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	4090      	lsls	r0, r2
 8000d84:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d86:	430a      	orrs	r2, r1
 8000d88:	33c0      	adds	r3, #192	; 0xc0
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d8e:	e031      	b.n	8000df4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d90:	4c1b      	ldr	r4, [pc, #108]	; (8000e00 <__NVIC_SetPriority+0xd8>)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	001a      	movs	r2, r3
 8000d98:	230f      	movs	r3, #15
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	3b08      	subs	r3, #8
 8000d9e:	0899      	lsrs	r1, r3, #2
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <__NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0018      	movs	r0, r3
 8000da8:	230f      	movs	r3, #15
 8000daa:	4003      	ands	r3, r0
 8000dac:	3b08      	subs	r3, #8
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3306      	adds	r3, #6
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	1dfa      	adds	r2, r7, #7
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4002      	ands	r2, r0
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	20ff      	movs	r0, #255	; 0xff
 8000dc8:	4090      	lsls	r0, r2
 8000dca:	0002      	movs	r2, r0
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	019b      	lsls	r3, r3, #6
 8000dd4:	20ff      	movs	r0, #255	; 0xff
 8000dd6:	4018      	ands	r0, r3
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	001d      	movs	r5, r3
 8000dde:	2303      	movs	r3, #3
 8000de0:	402b      	ands	r3, r5
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4098      	lsls	r0, r3
 8000de6:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	431a      	orrs	r2, r3
 8000dea:	1d8b      	adds	r3, r1, #6
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	18e3      	adds	r3, r4, r3
 8000df0:	3304      	adds	r3, #4
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <SysTick_Config+0x40>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d901      	bls.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e010      	b.n	8000e3c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <SysTick_Config+0x44>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	3a01      	subs	r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	2103      	movs	r1, #3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff7d 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SysTick_Config+0x44>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x44>)
 8000e36:	2207      	movs	r2, #7
 8000e38:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	00ffffff 	.word	0x00ffffff
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	230f      	movs	r3, #15
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	1c02      	adds	r2, r0, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff ff5c 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b004      	add	sp, #16
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	0002      	movs	r2, r0
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff ff32 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff ffae 	bl	8000e04 <SysTick_Config>
 8000ea8:	0003      	movs	r3, r0
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e062      	b.n	8000f8c <HAL_DMA_Init+0xd8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <HAL_DMA_Init+0xe0>)
 8000ecc:	4694      	mov	ip, r2
 8000ece:	4463      	add	r3, ip
 8000ed0:	2114      	movs	r1, #20
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff f918 	bl	8000108 <__udivsi3>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	009a      	lsls	r2, r3, #2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_DMA_Init+0xe4>)
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2225      	movs	r2, #37	; 0x25
 8000eea:	2102      	movs	r1, #2
 8000eec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <HAL_DMA_Init+0xe8>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	01db      	lsls	r3, r3, #7
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d019      	beq.n	8000f74 <HAL_DMA_Init+0xc0>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f40:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_DMA_Init+0xec>)
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_DMA_Init+0xec>)
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	4003      	ands	r3, r0
 8000f4e:	200f      	movs	r0, #15
 8000f50:	4098      	lsls	r0, r3
 8000f52:	0003      	movs	r3, r0
 8000f54:	43db      	mvns	r3, r3
 8000f56:	400b      	ands	r3, r1
 8000f58:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <HAL_DMA_Init+0xec>)
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_DMA_Init+0xec>)
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6858      	ldr	r0, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	241c      	movs	r4, #28
 8000f6a:	4023      	ands	r3, r4
 8000f6c:	4098      	lsls	r0, r3
 8000f6e:	0003      	movs	r3, r0
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2225      	movs	r2, #37	; 0x25
 8000f7e:	2101      	movs	r1, #1
 8000f80:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	2100      	movs	r1, #0
 8000f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b005      	add	sp, #20
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	bffdfff8 	.word	0xbffdfff8
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	ffff800f 	.word	0xffff800f
 8000fa0:	400200a8 	.word	0x400200a8

08000fa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	230f      	movs	r3, #15
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2225      	movs	r2, #37	; 0x25
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d008      	beq.n	8000fd2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e024      	b.n	800101c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	210e      	movs	r1, #14
 8000fde:	438a      	bics	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ffa:	211c      	movs	r1, #28
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2225      	movs	r2, #37	; 0x25
 800100a:	2101      	movs	r1, #1
 800100c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2224      	movs	r2, #36	; 0x24
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]

    return status;
 8001016:	230f      	movs	r3, #15
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	230f      	movs	r3, #15
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2225      	movs	r2, #37	; 0x25
 8001038:	5c9b      	ldrb	r3, [r3, r2]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d007      	beq.n	8001050 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2204      	movs	r2, #4
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e02a      	b.n	80010a6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	210e      	movs	r1, #14
 800105c:	438a      	bics	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	2101      	movs	r1, #1
 800106c:	438a      	bics	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001078:	211c      	movs	r1, #28
 800107a:	400a      	ands	r2, r1
 800107c:	2101      	movs	r1, #1
 800107e:	4091      	lsls	r1, r2
 8001080:	000a      	movs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2225      	movs	r2, #37	; 0x25
 8001088:	2101      	movs	r1, #1
 800108a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	; 0x24
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	0010      	movs	r0, r2
 80010a4:	4798      	blx	r3
    }
  }
  return status;
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	221c      	movs	r2, #28
 80010d2:	4013      	ands	r3, r2
 80010d4:	2204      	movs	r2, #4
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	d026      	beq.n	800112e <HAL_DMA_IRQHandler+0x7a>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2204      	movs	r2, #4
 80010e4:	4013      	ands	r3, r2
 80010e6:	d022      	beq.n	800112e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2220      	movs	r2, #32
 80010f0:	4013      	ands	r3, r2
 80010f2:	d107      	bne.n	8001104 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	2104      	movs	r1, #4
 8001100:	438a      	bics	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800110c:	211c      	movs	r1, #28
 800110e:	400a      	ands	r2, r1
 8001110:	2104      	movs	r1, #4
 8001112:	4091      	lsls	r1, r2
 8001114:	000a      	movs	r2, r1
 8001116:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	2b00      	cmp	r3, #0
 800111e:	d100      	bne.n	8001122 <HAL_DMA_IRQHandler+0x6e>
 8001120:	e071      	b.n	8001206 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	0010      	movs	r0, r2
 800112a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800112c:	e06b      	b.n	8001206 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	221c      	movs	r2, #28
 8001134:	4013      	ands	r3, r2
 8001136:	2202      	movs	r2, #2
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	d02d      	beq.n	800119e <HAL_DMA_IRQHandler+0xea>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d029      	beq.n	800119e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2220      	movs	r2, #32
 8001152:	4013      	ands	r3, r2
 8001154:	d10b      	bne.n	800116e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	210a      	movs	r1, #10
 8001162:	438a      	bics	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2225      	movs	r2, #37	; 0x25
 800116a:	2101      	movs	r1, #1
 800116c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001176:	211c      	movs	r1, #28
 8001178:	400a      	ands	r2, r1
 800117a:	2102      	movs	r1, #2
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2224      	movs	r2, #36	; 0x24
 8001186:	2100      	movs	r1, #0
 8001188:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	d039      	beq.n	8001206 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	0010      	movs	r0, r2
 800119a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800119c:	e033      	b.n	8001206 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	221c      	movs	r2, #28
 80011a4:	4013      	ands	r3, r2
 80011a6:	2208      	movs	r2, #8
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	d02a      	beq.n	8001208 <HAL_DMA_IRQHandler+0x154>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2208      	movs	r2, #8
 80011b6:	4013      	ands	r3, r2
 80011b8:	d026      	beq.n	8001208 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	210e      	movs	r1, #14
 80011c6:	438a      	bics	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011d2:	211c      	movs	r1, #28
 80011d4:	400a      	ands	r2, r1
 80011d6:	2101      	movs	r1, #1
 80011d8:	4091      	lsls	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2225      	movs	r2, #37	; 0x25
 80011e8:	2101      	movs	r1, #1
 80011ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2224      	movs	r2, #36	; 0x24
 80011f0:	2100      	movs	r1, #0
 80011f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	0010      	movs	r0, r2
 8001204:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46c0      	nop			; (mov r8, r8)
}
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001226:	e14f      	b.n	80014c8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x30>
 800123e:	e140      	b.n	80014c2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	409a      	lsls	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2107      	movs	r1, #7
 800132e:	400b      	ands	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	401a      	ands	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x17c>
 800138a:	e09a      	b.n	80014c2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x2d0>)
 800138e:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x2d0>)
 8001390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x2d4>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	589b      	ldr	r3, [r3, r2]
 80013a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2203      	movs	r2, #3
 80013aa:	4013      	ands	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	23a0      	movs	r3, #160	; 0xa0
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x1ea>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1e6>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_GPIO_Init+0x2dc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1de>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <HAL_GPIO_Init+0x2e4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1da>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2103      	movs	r1, #3
 8001400:	400a      	ands	r2, r1
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2d4>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	4013      	ands	r3, r2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_GPIO_Init+0x2c6>
 80014d4:	e6a8      	b.n	8001228 <HAL_GPIO_Init+0x18>
  }
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b006      	add	sp, #24
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	50000400 	.word	0x50000400
 80014ec:	50000800 	.word	0x50000800
 80014f0:	50000c00 	.word	0x50000c00
 80014f4:	50001c00 	.word	0x50001c00
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	0008      	movs	r0, r1
 8001506:	0011      	movs	r1, r2
 8001508:	1cbb      	adds	r3, r7, #2
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	1c7b      	adds	r3, r7, #1
 8001510:	1c0a      	adds	r2, r1, #0
 8001512:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001514:	1c7b      	adds	r3, r7, #1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151c:	1cbb      	adds	r3, r7, #2
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001526:	1cbb      	adds	r3, r7, #2
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	000a      	movs	r2, r1
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	1cb9      	adds	r1, r7, #2
 800155a:	8809      	ldrh	r1, [r1, #0]
 800155c:	400b      	ands	r3, r1
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 fbae 	bl	8001cdc <HAL_RCC_OscConfig+0x770>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001580:	4bcf      	ldr	r3, [pc, #828]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	220c      	movs	r2, #12
 8001586:	4013      	ands	r3, r2
 8001588:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158a:	4bcd      	ldr	r3, [pc, #820]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	4013      	ands	r3, r2
 8001594:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	d100      	bne.n	80015a2 <HAL_RCC_OscConfig+0x36>
 80015a0:	e07e      	b.n	80016a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d007      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_OscConfig+0x68>
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	4bc1      	ldr	r3, [pc, #772]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5a>
 80015c4:	e06b      	b.n	800169e <HAL_RCC_OscConfig+0x132>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d167      	bne.n	800169e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 fb84 	bl	8001cdc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x84>
 80015e0:	4bb7      	ldr	r3, [pc, #732]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80015e2:	4ab7      	ldr	r2, [pc, #732]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0249      	lsls	r1, r1, #9
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e027      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	02db      	lsls	r3, r3, #11
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10e      	bne.n	800161a <HAL_RCC_OscConfig+0xae>
 80015fc:	4bb0      	ldr	r3, [pc, #704]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80015fe:	4ab0      	ldr	r2, [pc, #704]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	02c9      	lsls	r1, r1, #11
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	4bad      	ldr	r3, [pc, #692]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800160c:	4aac      	ldr	r2, [pc, #688]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0249      	lsls	r1, r1, #9
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e012      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 800161a:	4ba9      	ldr	r3, [pc, #676]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800161c:	4aa8      	ldr	r2, [pc, #672]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	49a8      	ldr	r1, [pc, #672]	; (80018c4 <HAL_RCC_OscConfig+0x358>)
 8001622:	400a      	ands	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4ba6      	ldr	r3, [pc, #664]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4ba2      	ldr	r3, [pc, #648]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001636:	4aa2      	ldr	r2, [pc, #648]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	49a3      	ldr	r1, [pc, #652]	; (80018c8 <HAL_RCC_OscConfig+0x35c>)
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fb28 	bl	8000c9c <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001650:	e009      	b.n	8001666 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001652:	f7ff fb23 	bl	8000c9c <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b64      	cmp	r3, #100	; 0x64
 800165e:	d902      	bls.n	8001666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	f000 fb3b 	bl	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001666:	4b96      	ldr	r3, [pc, #600]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	029b      	lsls	r3, r3, #10
 800166e:	4013      	ands	r3, r2
 8001670:	d0ef      	beq.n	8001652 <HAL_RCC_OscConfig+0xe6>
 8001672:	e015      	b.n	80016a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb12 	bl	8000c9c <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff fb0d 	bl	8000c9c <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e325      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001690:	4b8b      	ldr	r3, [pc, #556]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4013      	ands	r3, r2
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x112>
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d100      	bne.n	80016ac <HAL_RCC_OscConfig+0x140>
 80016aa:	e08b      	b.n	80017c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d13f      	bne.n	800173e <HAL_RCC_OscConfig+0x1d2>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d13c      	bne.n	800173e <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016c4:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2204      	movs	r2, #4
 80016ca:	4013      	ands	r3, r2
 80016cc:	d004      	beq.n	80016d8 <HAL_RCC_OscConfig+0x16c>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e301      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4a79      	ldr	r2, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	497b      	ldr	r1, [pc, #492]	; (80018cc <HAL_RCC_OscConfig+0x360>)
 80016e0:	4019      	ands	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016ec:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80016ee:	4a74      	ldr	r2, [pc, #464]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	2109      	movs	r1, #9
 80016f4:	438a      	bics	r2, r1
 80016f6:	0011      	movs	r1, r2
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 fc3f 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001702:	0001      	movs	r1, r0
 8001704:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	220f      	movs	r2, #15
 800170c:	4013      	ands	r3, r2
 800170e:	4a70      	ldr	r2, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x364>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	000a      	movs	r2, r1
 8001714:	40da      	lsrs	r2, r3
 8001716:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_RCC_OscConfig+0x368>)
 8001718:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800171a:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <HAL_RCC_OscConfig+0x36c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2213      	movs	r2, #19
 8001720:	18bc      	adds	r4, r7, r2
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff fa74 	bl	8000c10 <HAL_InitTick>
 8001728:	0003      	movs	r3, r0
 800172a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800172c:	2313      	movs	r3, #19
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d046      	beq.n	80017c4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001736:	2313      	movs	r3, #19
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	e2ce      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d026      	beq.n	8001792 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001744:	4b5e      	ldr	r3, [pc, #376]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001746:	4a5e      	ldr	r2, [pc, #376]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	2109      	movs	r1, #9
 800174c:	438a      	bics	r2, r1
 800174e:	0011      	movs	r1, r2
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff faa1 	bl	8000c9c <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fa9c 	bl	8000c9c <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e2b4      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001772:	4b53      	ldr	r3, [pc, #332]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	4013      	ands	r3, r2
 800177a:	d0f1      	beq.n	8001760 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4952      	ldr	r1, [pc, #328]	; (80018cc <HAL_RCC_OscConfig+0x360>)
 8001784:	4019      	ands	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	430b      	orrs	r3, r1
 800178e:	6053      	str	r3, [r2, #4]
 8001790:	e018      	b.n	80017c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001794:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	438a      	bics	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fa7d 	bl	8000c9c <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fa78 	bl	8000c9c <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e290      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d1f1      	bne.n	80017a8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	4013      	ands	r3, r2
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x264>
 80017ce:	e0a1      	b.n	8001914 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d141      	bne.n	800185a <HAL_RCC_OscConfig+0x2ee>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d6:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x282>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e276      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ee:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4939      	ldr	r1, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x370>)
 80017f6:	4019      	ands	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001800:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	0a19      	lsrs	r1, r3, #8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	430b      	orrs	r3, r1
 8001812:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	0b5b      	lsrs	r3, r3, #13
 800181a:	3301      	adds	r3, #1
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	0212      	lsls	r2, r2, #8
 8001820:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	210f      	movs	r1, #15
 800182a:	400b      	ands	r3, r1
 800182c:	4928      	ldr	r1, [pc, #160]	; (80018d0 <HAL_RCC_OscConfig+0x364>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_RCC_OscConfig+0x368>)
 8001834:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_RCC_OscConfig+0x36c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2213      	movs	r2, #19
 800183c:	18bc      	adds	r4, r7, r2
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff f9e6 	bl	8000c10 <HAL_InitTick>
 8001844:	0003      	movs	r3, r0
 8001846:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001848:	2313      	movs	r3, #19
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d060      	beq.n	8001914 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001852:	2313      	movs	r3, #19
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	e240      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d03e      	beq.n	80018e0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0049      	lsls	r1, r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fa14 	bl	8000c9c <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x320>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800187a:	f7ff fa0f 	bl	8000c9c <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e227      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x30e>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	490f      	ldr	r1, [pc, #60]	; (80018dc <HAL_RCC_OscConfig+0x370>)
 80018a0:	4019      	ands	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_RCC_OscConfig+0x354>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	0a19      	lsrs	r1, r3, #8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	061b      	lsls	r3, r3, #24
 80018ba:	430b      	orrs	r3, r1
 80018bc:	6053      	str	r3, [r2, #4]
 80018be:	e029      	b.n	8001914 <HAL_RCC_OscConfig+0x3a8>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	fffeffff 	.word	0xfffeffff
 80018c8:	fffbffff 	.word	0xfffbffff
 80018cc:	ffffe0ff 	.word	0xffffe0ff
 80018d0:	08003b6c 	.word	0x08003b6c
 80018d4:	20000008 	.word	0x20000008
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e0:	4bbd      	ldr	r3, [pc, #756]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 80018e2:	4abd      	ldr	r2, [pc, #756]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	49bd      	ldr	r1, [pc, #756]	; (8001bdc <HAL_RCC_OscConfig+0x670>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9d6 	bl	8000c9c <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f6:	f7ff f9d1 	bl	8000c9c <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1e9      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001908:	4bb3      	ldr	r3, [pc, #716]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	4013      	ands	r3, r2
 800191c:	d036      	beq.n	800198c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d019      	beq.n	800195a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4bac      	ldr	r3, [pc, #688]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001928:	4aab      	ldr	r2, [pc, #684]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 800192a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800192c:	2101      	movs	r1, #1
 800192e:	430a      	orrs	r2, r1
 8001930:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff f9b3 	bl	8000c9c <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff f9ae 	bl	8000c9c <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1c6      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800194e:	4ba2      	ldr	r3, [pc, #648]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d0f1      	beq.n	800193c <HAL_RCC_OscConfig+0x3d0>
 8001958:	e018      	b.n	800198c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195a:	4b9f      	ldr	r3, [pc, #636]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 800195c:	4a9e      	ldr	r2, [pc, #632]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 800195e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001960:	2101      	movs	r1, #1
 8001962:	438a      	bics	r2, r1
 8001964:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff f999 	bl	8000c9c <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff f994 	bl	8000c9c <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1ac      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001982:	4b95      	ldr	r3, [pc, #596]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d1f1      	bne.n	8001970 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2204      	movs	r2, #4
 8001992:	4013      	ands	r3, r2
 8001994:	d100      	bne.n	8001998 <HAL_RCC_OscConfig+0x42c>
 8001996:	e0af      	b.n	8001af8 <HAL_RCC_OscConfig+0x58c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001998:	2327      	movs	r3, #39	; 0x27
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a0:	4b8d      	ldr	r3, [pc, #564]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 80019a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	055b      	lsls	r3, r3, #21
 80019a8:	4013      	ands	r3, r2
 80019aa:	d10a      	bne.n	80019c2 <HAL_RCC_OscConfig+0x456>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	4b8a      	ldr	r3, [pc, #552]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 80019ae:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 80019b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0549      	lsls	r1, r1, #21
 80019b6:	430a      	orrs	r2, r1
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019ba:	2327      	movs	r3, #39	; 0x27
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b87      	ldr	r3, [pc, #540]	; (8001be0 <HAL_RCC_OscConfig+0x674>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b84      	ldr	r3, [pc, #528]	; (8001be0 <HAL_RCC_OscConfig+0x674>)
 80019d0:	4a83      	ldr	r2, [pc, #524]	; (8001be0 <HAL_RCC_OscConfig+0x674>)
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	0049      	lsls	r1, r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f95e 	bl	8000c9c <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x48c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff f959 	bl	8000c9c <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x48c>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e171      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <HAL_RCC_OscConfig+0x674>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4b4>
 8001a10:	4b71      	ldr	r3, [pc, #452]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a12:	4a71      	ldr	r2, [pc, #452]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0049      	lsls	r1, r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a1e:	e031      	b.n	8001a84 <HAL_RCC_OscConfig+0x518>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4d6>
 8001a28:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a2e:	496b      	ldr	r1, [pc, #428]	; (8001bdc <HAL_RCC_OscConfig+0x670>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	651a      	str	r2, [r3, #80]	; 0x50
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a36:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a3a:	496a      	ldr	r1, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x678>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a40:	e020      	b.n	8001a84 <HAL_RCC_OscConfig+0x518>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	23a0      	movs	r3, #160	; 0xa0
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d10e      	bne.n	8001a6c <HAL_RCC_OscConfig+0x500>
 8001a4e:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a50:	4a61      	ldr	r2, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	00c9      	lsls	r1, r1, #3
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a5c:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	0049      	lsls	r1, r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	651a      	str	r2, [r3, #80]	; 0x50
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x518>
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a6e:	4a5a      	ldr	r2, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a72:	495a      	ldr	r1, [pc, #360]	; (8001bdc <HAL_RCC_OscConfig+0x670>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	651a      	str	r2, [r3, #80]	; 0x50
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a7a:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001a7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a7e:	4959      	ldr	r1, [pc, #356]	; (8001be4 <HAL_RCC_OscConfig+0x678>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d015      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x54c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f906 	bl	8000c9c <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_OscConfig+0x53e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f901 	bl	8000c9c <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_RCC_OscConfig+0x67c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x53e>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e118      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d0ef      	beq.n	8001a96 <HAL_RCC_OscConfig+0x52a>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x576>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f8f0 	bl	8000c9c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f8eb 	bl	8000c9c <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x67c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e102      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ad6:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1ef      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x556>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae2:	2327      	movs	r3, #39	; 0x27
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x58c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001aee:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001af0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001af2:	493e      	ldr	r1, [pc, #248]	; (8001bec <HAL_RCC_OscConfig+0x680>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2220      	movs	r2, #32
 8001afe:	4013      	ands	r3, r2
 8001b00:	d049      	beq.n	8001b96 <HAL_RCC_OscConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d026      	beq.n	8001b58 <HAL_RCC_OscConfig+0x5ec>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b0e:	6892      	ldr	r2, [r2, #8]
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_RCC_OscConfig+0x684>)
 8001b24:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x684>)
 8001b26:	6a12      	ldr	r2, [r2, #32]
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0189      	lsls	r1, r1, #6
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f8b4 	bl	8000c9c <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b3a:	f7ff f8af 	bl	8000c9c <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0c7      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d0f1      	beq.n	8001b3a <HAL_RCC_OscConfig+0x5ce>
 8001b56:	e01e      	b.n	8001b96 <HAL_RCC_OscConfig+0x62a>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b5c:	6892      	ldr	r2, [r2, #8]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x684>)
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x684>)
 8001b68:	6a12      	ldr	r2, [r2, #32]
 8001b6a:	4922      	ldr	r1, [pc, #136]	; (8001bf4 <HAL_RCC_OscConfig+0x688>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f894 	bl	8000c9c <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x620>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7a:	f7ff f88f 	bl	8000c9c <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x620>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0a7      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f1      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60e>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d100      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x634>
 8001b9e:	e09c      	b.n	8001cda <HAL_RCC_OscConfig+0x76e>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d100      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x63c>
 8001ba6:	e075      	b.n	8001c94 <HAL_RCC_OscConfig+0x728>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d156      	bne.n	8001c5e <HAL_RCC_OscConfig+0x6f2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x66c>)
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <HAL_RCC_OscConfig+0x68c>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f86e 	bl	8000c9c <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bc4:	e01a      	b.n	8001bfc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff f869 	bl	8000c9c <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d913      	bls.n	8001bfc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e081      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	fffffeff 	.word	0xfffffeff
 8001be0:	40007000 	.word	0x40007000
 8001be4:	fffffbff 	.word	0xfffffbff
 8001be8:	00001388 	.word	0x00001388
 8001bec:	efffffff 	.word	0xefffffff
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	ffffdfff 	.word	0xffffdfff
 8001bf8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	049b      	lsls	r3, r3, #18
 8001c04:	4013      	ands	r3, r2
 8001c06:	d1de      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x65a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4a36      	ldr	r2, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4936      	ldr	r1, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x77c>)
 8001c10:	4019      	ands	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4318      	orrs	r0, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	4303      	orrs	r3, r0
 8001c22:	430b      	orrs	r3, r1
 8001c24:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c28:	4a2e      	ldr	r2, [pc, #184]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0449      	lsls	r1, r1, #17
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f832 	bl	8000c9c <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x6e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff f82d 	bl	8000c9c <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x6e4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e045      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	049b      	lsls	r3, r3, #18
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x6d2>
 8001c5c:	e03d      	b.n	8001cda <HAL_RCC_OscConfig+0x76e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4921      	ldr	r1, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f817 	bl	8000c9c <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x71a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f812 	bl	8000c9c <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x71a>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e02a      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	049b      	lsls	r3, r3, #18
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x708>
 8001c92:	e022      	b.n	8001cda <HAL_RCC_OscConfig+0x76e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x734>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	025b      	lsls	r3, r3, #9
 8001cac:	401a      	ands	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d10f      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x76a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	23f0      	movs	r3, #240	; 0xf0
 8001cba:	039b      	lsls	r3, r3, #14
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x76a>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	401a      	ands	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x76e>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b00b      	add	sp, #44	; 0x2c
 8001ce2:	bd90      	pop	{r4, r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	ff02ffff 	.word	0xff02ffff
 8001cec:	feffffff 	.word	0xfeffffff

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e128      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d21e      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b93      	ldr	r3, [pc, #588]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001d14:	4a92      	ldr	r2, [pc, #584]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d24:	f7fe ffba 	bl	8000c9c <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7fe ffb5 	bl	8000c9c <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_ClockConfig+0x274>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e109      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b87      	ldr	r3, [pc, #540]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	401a      	ands	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4a83      	ldr	r2, [pc, #524]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001d5c:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	21f0      	movs	r1, #240	; 0xf0
 8001d62:	438b      	bics	r3, r1
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d100      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x8a>
 8001d78:	e089      	b.n	8001e8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d82:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d120      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0e1      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d9a:	4b73      	ldr	r3, [pc, #460]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	049b      	lsls	r3, r3, #18
 8001da2:	4013      	ands	r3, r2
 8001da4:	d114      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0d5      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	d109      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0ca      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dc0:	4b69      	ldr	r3, [pc, #420]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0c2      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd0:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001dd2:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	438b      	bics	r3, r1
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7fe ff5a 	bl	8000c9c <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d111      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df6:	f7fe ff51 	bl	8000c9c <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x274>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0a5      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0a:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	220c      	movs	r2, #12
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d1ef      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x106>
 8001e16:	e03a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7fe ff3b 	bl	8000c9c <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x274>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e08f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e36:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d1ef      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x132>
 8001e42:	e024      	b.n	8001e8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d11b      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7fe ff25 	bl	8000c9c <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_RCC_ClockConfig+0x274>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e079      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	220c      	movs	r2, #12
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d1ef      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x15e>
 8001e6e:	e00e      	b.n	8001e8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7fe ff14 	bl	8000c9c <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	4a3a      	ldr	r2, [pc, #232]	; (8001f64 <HAL_RCC_ClockConfig+0x274>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e068      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e84:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	220c      	movs	r2, #12
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	401a      	ands	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d91e      	bls.n	8001eda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9c:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001e9e:	4a30      	ldr	r2, [pc, #192]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	0011      	movs	r1, r2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eae:	f7fe fef5 	bl	8000c9c <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	e009      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe fef0 	bl	8000c9c <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <HAL_RCC_ClockConfig+0x274>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e044      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_ClockConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x206>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4920      	ldr	r1, [pc, #128]	; (8001f6c <HAL_RCC_ClockConfig+0x27c>)
 8001eec:	4019      	ands	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2208      	movs	r2, #8
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	491a      	ldr	r1, [pc, #104]	; (8001f70 <HAL_RCC_ClockConfig+0x280>)
 8001f08:	4019      	ands	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	430b      	orrs	r3, r1
 8001f12:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f14:	f000 f834 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f18:	0001      	movs	r1, r0
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_ClockConfig+0x278>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	220f      	movs	r2, #15
 8001f22:	4013      	ands	r3, r2
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_RCC_ClockConfig+0x284>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	000a      	movs	r2, r1
 8001f2a:	40da      	lsrs	r2, r3
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x288>)
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x28c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	220b      	movs	r2, #11
 8001f36:	18bc      	adds	r4, r7, r2
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe fe69 	bl	8000c10 <HAL_InitTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f42:	230b      	movs	r3, #11
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f4c:	230b      	movs	r3, #11
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b005      	add	sp, #20
 8001f5c:	bd90      	pop	{r4, r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40022000 	.word	0x40022000
 8001f64:	00001388 	.word	0x00001388
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	fffff8ff 	.word	0xfffff8ff
 8001f70:	ffffc7ff 	.word	0xffffc7ff
 8001f74:	08003b6c 	.word	0x08003b6c
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b08f      	sub	sp, #60	; 0x3c
 8001f84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8e:	230c      	movs	r3, #12
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d00f      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x3c>
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d000      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x20>
 8001f9e:	e073      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d002      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001faa:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fae:	e079      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001fb0:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fb4:	e076      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fba:	e073      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	0c9a      	lsrs	r2, r3, #18
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	0d9a      	lsrs	r2, r3, #22
 8001fce:	2303      	movs	r3, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	025b      	lsls	r3, r3, #9
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	4a34      	ldr	r2, [pc, #208]	; (80020bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fec:	2300      	movs	r3, #0
 8001fee:	69b8      	ldr	r0, [r7, #24]
 8001ff0:	69f9      	ldr	r1, [r7, #28]
 8001ff2:	f7fe f935 	bl	8000260 <__aeabi_lmul>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	000c      	movs	r4, r1
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	0021      	movs	r1, r4
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f7fe f909 	bl	8000220 <__aeabi_uldivmod>
 800200e:	0003      	movs	r3, r0
 8002010:	000c      	movs	r4, r1
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
 8002014:	e035      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x130>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2210      	movs	r2, #16
 800201c:	4013      	ands	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x134>)
 800202a:	2300      	movs	r3, #0
 800202c:	68b8      	ldr	r0, [r7, #8]
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	f7fe f916 	bl	8000260 <__aeabi_lmul>
 8002034:	0003      	movs	r3, r0
 8002036:	000c      	movs	r4, r1
 8002038:	0018      	movs	r0, r3
 800203a:	0021      	movs	r1, r4
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f7fe f8ea 	bl	8000220 <__aeabi_uldivmod>
 800204c:	0003      	movs	r3, r0
 800204e:	000c      	movs	r4, r1
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
 8002052:	e016      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	0018      	movs	r0, r3
 8002058:	2300      	movs	r3, #0
 800205a:	0019      	movs	r1, r3
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x138>)
 800205e:	2300      	movs	r3, #0
 8002060:	f7fe f8fe 	bl	8000260 <__aeabi_lmul>
 8002064:	0003      	movs	r3, r0
 8002066:	000c      	movs	r4, r1
 8002068:	0018      	movs	r0, r3
 800206a:	0021      	movs	r1, r4
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	001d      	movs	r5, r3
 8002070:	2300      	movs	r3, #0
 8002072:	001e      	movs	r6, r3
 8002074:	002a      	movs	r2, r5
 8002076:	0033      	movs	r3, r6
 8002078:	f7fe f8d2 	bl	8000220 <__aeabi_uldivmod>
 800207c:	0003      	movs	r3, r0
 800207e:	000c      	movs	r4, r1
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002086:	e00d      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x130>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	0b5b      	lsrs	r3, r3, #13
 800208e:	2207      	movs	r2, #7
 8002090:	4013      	ands	r3, r2
 8002092:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	3301      	adds	r3, #1
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	0212      	lsls	r2, r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	0013      	movs	r3, r2
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b00f      	add	sp, #60	; 0x3c
 80020ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	003d0900 	.word	0x003d0900
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200
 80020c0:	08003b84 	.word	0x08003b84

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000008 	.word	0x20000008

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020dc:	f7ff fff2 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e0:	0001      	movs	r1, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	2207      	movs	r2, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	40d9      	lsrs	r1, r3
 80020f2:	000b      	movs	r3, r1
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003b7c 	.word	0x08003b7c

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002108:	f7ff ffdc 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 800210c:	0001      	movs	r1, r0
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	0adb      	lsrs	r3, r3, #11
 8002114:	2207      	movs	r2, #7
 8002116:	4013      	ands	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCC_GetPCLK2Freq+0x28>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	40d9      	lsrs	r1, r3
 800211e:	000b      	movs	r3, r1
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	40021000 	.word	0x40021000
 800212c:	08003b7c 	.word	0x08003b7c

08002130 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002138:	2317      	movs	r3, #23
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	4013      	ands	r3, r2
 8002148:	d106      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4013      	ands	r3, r2
 8002154:	d100      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002156:	e0d8      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1da>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002158:	4b99      	ldr	r3, [pc, #612]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800215a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	4013      	ands	r3, r2
 8002162:	d10a      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002166:	4a96      	ldr	r2, [pc, #600]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002168:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0549      	lsls	r1, r1, #21
 800216e:	430a      	orrs	r2, r1
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002172:	2317      	movs	r3, #23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4013      	ands	r3, r2
 8002184:	d11a      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002188:	4a8e      	ldr	r2, [pc, #568]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0049      	lsls	r1, r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002194:	f7fe fd82 	bl	8000c9c <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe fd7d 	bl	8000c9c <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e103      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x288>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b84      	ldr	r3, [pc, #528]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0f0      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	039b      	lsls	r3, r3, #14
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	039b      	lsls	r3, r3, #14
 80021d0:	401a      	ands	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d107      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	039b      	lsls	r3, r3, #14
 80021e0:	401a      	ands	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d013      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	23c0      	movs	r3, #192	; 0xc0
 80021ee:	029b      	lsls	r3, r3, #10
 80021f0:	401a      	ands	r2, r3
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	029b      	lsls	r3, r3, #10
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d10a      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021fa:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	401a      	ands	r2, r3
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	429a      	cmp	r2, r3
 800220a:	d101      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d3      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x288>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002214:	23c0      	movs	r3, #192	; 0xc0
 8002216:	029b      	lsls	r3, r3, #10
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d049      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	029b      	lsls	r3, r3, #10
 800222a:	401a      	ands	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	429a      	cmp	r2, r3
 8002230:	d004      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2220      	movs	r2, #32
 8002238:	4013      	ands	r3, r2
 800223a:	d10d      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	23c0      	movs	r3, #192	; 0xc0
 8002242:	029b      	lsls	r3, r3, #10
 8002244:	401a      	ands	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d034      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4013      	ands	r3, r2
 8002256:	d02e      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225c:	4a5a      	ldr	r2, [pc, #360]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002264:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0309      	lsls	r1, r1, #12
 800226c:	430a      	orrs	r2, r1
 800226e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002272:	4a53      	ldr	r2, [pc, #332]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002274:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002276:	4955      	ldr	r1, [pc, #340]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002278:	400a      	ands	r2, r1
 800227a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d014      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fd06 	bl	8000c9c <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002294:	e009      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fd01 	bl	8000c9c <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e086      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x288>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022aa:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0ef      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	23c0      	movs	r3, #192	; 0xc0
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	401a      	ands	r2, r3
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 80022c8:	4a3d      	ldr	r2, [pc, #244]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4941      	ldr	r1, [pc, #260]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80022d0:	4019      	ands	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6858      	ldr	r0, [r3, #4]
 80022d6:	23c0      	movs	r3, #192	; 0xc0
 80022d8:	039b      	lsls	r3, r3, #14
 80022da:	4003      	ands	r3, r0
 80022dc:	430b      	orrs	r3, r1
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4a37      	ldr	r2, [pc, #220]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6858      	ldr	r0, [r3, #4]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	4003      	ands	r3, r0
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022f4:	2317      	movs	r3, #23
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002300:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002304:	4934      	ldr	r1, [pc, #208]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002306:	400a      	ands	r2, r1
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	2103      	movs	r1, #3
 800231c:	438b      	bics	r3, r1
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	430b      	orrs	r3, r1
 8002326:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002332:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002334:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	210c      	movs	r1, #12
 800233a:	438b      	bics	r3, r1
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	430b      	orrs	r3, r1
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d008      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4921      	ldr	r1, [pc, #132]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002358:	4019      	ands	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	430b      	orrs	r3, r1
 8002360:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2208      	movs	r2, #8
 8002368:	4013      	ands	r3, r2
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002374:	4019      	ands	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	430b      	orrs	r3, r1
 800237c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	4013      	ands	r3, r2
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4915      	ldr	r1, [pc, #84]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002390:	4019      	ands	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	430b      	orrs	r3, r1
 8002398:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	4013      	ands	r3, r2
 80023a2:	d008      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	490f      	ldr	r1, [pc, #60]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80023ac:	4019      	ands	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	430b      	orrs	r3, r1
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b006      	add	sp, #24
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
 80023c8:	fffcffff 	.word	0xfffcffff
 80023cc:	fff7ffff 	.word	0xfff7ffff
 80023d0:	00001388 	.word	0x00001388
 80023d4:	ffcfffff 	.word	0xffcfffff
 80023d8:	efffffff 	.word	0xefffffff
 80023dc:	fffff3ff 	.word	0xfffff3ff
 80023e0:	ffffcfff 	.word	0xffffcfff
 80023e4:	fbffffff 	.word	0xfbffffff
 80023e8:	fff3ffff 	.word	0xfff3ffff

080023ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e044      	b.n	8002488 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2274      	movs	r2, #116	; 0x74
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f7fe faf1 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2224      	movs	r2, #36	; 0x24
 800241a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fc34 	bl	8002c9c <UART_SetConfig>
 8002434:	0003      	movs	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e024      	b.n	8002488 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fecb 	bl	80031e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	6852      	ldr	r2, [r2, #4]
 8002458:	490d      	ldr	r1, [pc, #52]	; (8002490 <HAL_UART_Init+0xa4>)
 800245a:	400a      	ands	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	212a      	movs	r1, #42	; 0x2a
 800246a:	438a      	bics	r2, r1
 800246c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 ff5b 	bl	800333c <UART_CheckIdleState>
 8002486:	0003      	movs	r3, r0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}
 8002490:	ffffb7ff 	.word	0xffffb7ff

08002494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d000      	beq.n	80024ae <HAL_UART_Transmit+0x1a>
 80024ac:	e094      	b.n	80025d8 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_UART_Transmit+0x28>
 80024b4:	1dbb      	adds	r3, r7, #6
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e08c      	b.n	80025da <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	015b      	lsls	r3, r3, #5
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d109      	bne.n	80024e0 <HAL_UART_Transmit+0x4c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d001      	beq.n	80024e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e07c      	b.n	80025da <HAL_UART_Transmit+0x146>
      }
    }

    __HAL_LOCK(huart);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2274      	movs	r2, #116	; 0x74
 80024e4:	5c9b      	ldrb	r3, [r3, r2]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Transmit+0x5a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e075      	b.n	80025da <HAL_UART_Transmit+0x146>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2274      	movs	r2, #116	; 0x74
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	2100      	movs	r1, #0
 80024fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2221      	movs	r2, #33	; 0x21
 8002502:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002504:	f7fe fbca 	bl	8000c9c <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1dba      	adds	r2, r7, #6
 8002510:	2150      	movs	r1, #80	; 0x50
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1dba      	adds	r2, r7, #6
 800251a:	2152      	movs	r1, #82	; 0x52
 800251c:	8812      	ldrh	r2, [r2, #0]
 800251e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	429a      	cmp	r2, r3
 800252a:	d108      	bne.n	800253e <HAL_UART_Transmit+0xaa>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	e003      	b.n	8002546 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2274      	movs	r2, #116	; 0x74
 800254a:	2100      	movs	r1, #0
 800254c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800254e:	e02b      	b.n	80025a8 <HAL_UART_Transmit+0x114>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	0013      	movs	r3, r2
 800255a:	2200      	movs	r2, #0
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	f000 ff37 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e037      	b.n	80025da <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_UART_Transmit+0xf2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	05d2      	lsls	r2, r2, #23
 800257a:	0dd2      	lsrs	r2, r2, #23
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	3302      	adds	r3, #2
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e007      	b.n	8002596 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3301      	adds	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2252      	movs	r2, #82	; 0x52
 800259a:	5a9b      	ldrh	r3, [r3, r2]
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b299      	uxth	r1, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2252      	movs	r2, #82	; 0x52
 80025a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2252      	movs	r2, #82	; 0x52
 80025ac:	5a9b      	ldrh	r3, [r3, r2]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1cd      	bne.n	8002550 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	0013      	movs	r3, r2
 80025be:	2200      	movs	r2, #0
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	f000 ff05 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <HAL_UART_Transmit+0x13a>
    {
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e005      	b.n	80025da <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b008      	add	sp, #32
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	1dbb      	adds	r3, r7, #6
 80025f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d153      	bne.n	80026a2 <HAL_UART_Receive_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_UART_Receive_IT+0x24>
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e04b      	b.n	80026a4 <HAL_UART_Receive_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	429a      	cmp	r2, r3
 8002616:	d109      	bne.n	800262c <HAL_UART_Receive_IT+0x48>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	d001      	beq.n	800262c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e03b      	b.n	80026a4 <HAL_UART_Receive_IT+0xc0>
      }
    }

    __HAL_LOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2274      	movs	r2, #116	; 0x74
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_UART_Receive_IT+0x56>
 8002636:	2302      	movs	r3, #2
 8002638:	e034      	b.n	80026a4 <HAL_UART_Receive_IT+0xc0>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2274      	movs	r2, #116	; 0x74
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_UART_Receive_IT+0xc8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01e      	beq.n	8002690 <HAL_UART_Receive_IT+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	4013      	ands	r3, r2
 800265e:	d017      	beq.n	8002690 <HAL_UART_Receive_IT+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002660:	f3ef 8310 	mrs	r3, PRIMASK
 8002664:	613b      	str	r3, [r7, #16]
  return(result);
 8002666:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	2301      	movs	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f383 8810 	msr	PRIMASK, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	04c9      	lsls	r1, r1, #19
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002690:	1dbb      	adds	r3, r7, #6
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 ff55 	bl	8003548 <UART_Start_Receive_IT>
 800269e:	0003      	movs	r3, r0
 80026a0:	e000      	b.n	80026a4 <HAL_UART_Receive_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
  }
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b008      	add	sp, #32
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40004800 	.word	0x40004800

080026b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0aa      	sub	sp, #168	; 0xa8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	22a4      	movs	r2, #164	; 0xa4
 80026c0:	18ba      	adds	r2, r7, r2
 80026c2:	6013      	str	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	22a0      	movs	r2, #160	; 0xa0
 80026cc:	18ba      	adds	r2, r7, r2
 80026ce:	6013      	str	r3, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	229c      	movs	r2, #156	; 0x9c
 80026d8:	18ba      	adds	r2, r7, r2
 80026da:	6013      	str	r3, [r2, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026dc:	23a4      	movs	r3, #164	; 0xa4
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a9b      	ldr	r2, [pc, #620]	; (8002950 <HAL_UART_IRQHandler+0x2a0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	2298      	movs	r2, #152	; 0x98
 80026e8:	18ba      	adds	r2, r7, r2
 80026ea:	6013      	str	r3, [r2, #0]
  if (errorflags == 0U)
 80026ec:	2398      	movs	r3, #152	; 0x98
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d116      	bne.n	8002724 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026f6:	23a4      	movs	r3, #164	; 0xa4
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2220      	movs	r2, #32
 80026fe:	4013      	ands	r3, r2
 8002700:	d010      	beq.n	8002724 <HAL_UART_IRQHandler+0x74>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002702:	23a0      	movs	r3, #160	; 0xa0
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	4013      	ands	r3, r2
 800270c:	d00a      	beq.n	8002724 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002712:	2b00      	cmp	r3, #0
 8002714:	d100      	bne.n	8002718 <HAL_UART_IRQHandler+0x68>
 8002716:	e294      	b.n	8002c42 <HAL_UART_IRQHandler+0x592>
      {
        huart->RxISR(huart);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	0010      	movs	r0, r2
 8002720:	4798      	blx	r3
      }
      return;
 8002722:	e28e      	b.n	8002c42 <HAL_UART_IRQHandler+0x592>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002724:	2398      	movs	r3, #152	; 0x98
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d100      	bne.n	8002730 <HAL_UART_IRQHandler+0x80>
 800272e:	e115      	b.n	800295c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002730:	239c      	movs	r3, #156	; 0x9c
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d106      	bne.n	800274a <HAL_UART_IRQHandler+0x9a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800273c:	23a0      	movs	r3, #160	; 0xa0
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a84      	ldr	r2, [pc, #528]	; (8002954 <HAL_UART_IRQHandler+0x2a4>)
 8002744:	4013      	ands	r3, r2
 8002746:	d100      	bne.n	800274a <HAL_UART_IRQHandler+0x9a>
 8002748:	e108      	b.n	800295c <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800274a:	23a4      	movs	r3, #164	; 0xa4
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d012      	beq.n	800277c <HAL_UART_IRQHandler+0xcc>
 8002756:	23a0      	movs	r3, #160	; 0xa0
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4013      	ands	r3, r2
 8002762:	d00b      	beq.n	800277c <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	589b      	ldr	r3, [r3, r2]
 8002772:	2201      	movs	r2, #1
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800277c:	23a4      	movs	r3, #164	; 0xa4
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d011      	beq.n	80027ac <HAL_UART_IRQHandler+0xfc>
 8002788:	239c      	movs	r3, #156	; 0x9c
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d00b      	beq.n	80027ac <HAL_UART_IRQHandler+0xfc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2202      	movs	r2, #2
 800279a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	589b      	ldr	r3, [r3, r2]
 80027a2:	2204      	movs	r2, #4
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ac:	23a4      	movs	r3, #164	; 0xa4
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2204      	movs	r2, #4
 80027b4:	4013      	ands	r3, r2
 80027b6:	d011      	beq.n	80027dc <HAL_UART_IRQHandler+0x12c>
 80027b8:	239c      	movs	r3, #156	; 0x9c
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d00b      	beq.n	80027dc <HAL_UART_IRQHandler+0x12c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2204      	movs	r2, #4
 80027ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	589b      	ldr	r3, [r3, r2]
 80027d2:	2202      	movs	r2, #2
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027dc:	23a4      	movs	r3, #164	; 0xa4
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2208      	movs	r2, #8
 80027e4:	4013      	ands	r3, r2
 80027e6:	d017      	beq.n	8002818 <HAL_UART_IRQHandler+0x168>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027e8:	23a0      	movs	r3, #160	; 0xa0
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	d105      	bne.n	8002800 <HAL_UART_IRQHandler+0x150>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027f4:	239c      	movs	r3, #156	; 0x9c
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027fe:	d00b      	beq.n	8002818 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2208      	movs	r2, #8
 8002806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	589b      	ldr	r3, [r3, r2]
 800280e:	2208      	movs	r2, #8
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002818:	23a4      	movs	r3, #164	; 0xa4
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4013      	ands	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_UART_IRQHandler+0x19e>
 8002826:	23a0      	movs	r3, #160	; 0xa0
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	04db      	lsls	r3, r3, #19
 8002830:	4013      	ands	r3, r2
 8002832:	d00c      	beq.n	800284e <HAL_UART_IRQHandler+0x19e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	589b      	ldr	r3, [r3, r2]
 8002844:	2220      	movs	r2, #32
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	589b      	ldr	r3, [r3, r2]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d100      	bne.n	800285a <HAL_UART_IRQHandler+0x1aa>
 8002858:	e1f5      	b.n	8002c46 <HAL_UART_IRQHandler+0x596>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800285a:	23a4      	movs	r3, #164	; 0xa4
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2220      	movs	r2, #32
 8002862:	4013      	ands	r3, r2
 8002864:	d00e      	beq.n	8002884 <HAL_UART_IRQHandler+0x1d4>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002866:	23a0      	movs	r3, #160	; 0xa0
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	4013      	ands	r3, r2
 8002870:	d008      	beq.n	8002884 <HAL_UART_IRQHandler+0x1d4>
      {
        if (huart->RxISR != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_UART_IRQHandler+0x1d4>
        {
          huart->RxISR(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	0010      	movs	r0, r2
 8002882:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	589b      	ldr	r3, [r3, r2]
 800288a:	2294      	movs	r2, #148	; 0x94
 800288c:	18ba      	adds	r2, r7, r2
 800288e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	4013      	ands	r3, r2
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d005      	beq.n	80028aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800289e:	2394      	movs	r3, #148	; 0x94
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2228      	movs	r2, #40	; 0x28
 80028a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a8:	d046      	beq.n	8002938 <HAL_UART_IRQHandler+0x288>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fef7 	bl	80036a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2240      	movs	r2, #64	; 0x40
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d136      	bne.n	800292e <HAL_UART_IRQHandler+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80028c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c8:	2290      	movs	r2, #144	; 0x90
 80028ca:	18ba      	adds	r2, r7, r2
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	2301      	movs	r3, #1
 80028d0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028d4:	f383 8810 	msr	PRIMASK, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	438a      	bics	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	2390      	movs	r3, #144	; 0x90
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f2:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d012      	beq.n	8002924 <HAL_UART_IRQHandler+0x274>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_UART_IRQHandler+0x2a8>)
 8002904:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	0018      	movs	r0, r3
 800290c:	f7fe fb8a 	bl	8001024 <HAL_DMA_Abort_IT>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d01a      	beq.n	800294a <HAL_UART_IRQHandler+0x29a>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	0018      	movs	r0, r3
 8002920:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002922:	e012      	b.n	800294a <HAL_UART_IRQHandler+0x29a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f9a4 	bl	8002c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	e00d      	b.n	800294a <HAL_UART_IRQHandler+0x29a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f99f 	bl	8002c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002936:	e008      	b.n	800294a <HAL_UART_IRQHandler+0x29a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f99a 	bl	8002c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	2100      	movs	r1, #0
 8002946:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002948:	e17d      	b.n	8002c46 <HAL_UART_IRQHandler+0x596>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294a:	46c0      	nop			; (mov r8, r8)
    return;
 800294c:	e17b      	b.n	8002c46 <HAL_UART_IRQHandler+0x596>
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	0000080f 	.word	0x0000080f
 8002954:	04000120 	.word	0x04000120
 8002958:	08003759 	.word	0x08003759

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	2b01      	cmp	r3, #1
 8002962:	d000      	beq.n	8002966 <HAL_UART_IRQHandler+0x2b6>
 8002964:	e12d      	b.n	8002bc2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002966:	23a4      	movs	r3, #164	; 0xa4
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	4013      	ands	r3, r2
 8002970:	d100      	bne.n	8002974 <HAL_UART_IRQHandler+0x2c4>
 8002972:	e126      	b.n	8002bc2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002974:	23a0      	movs	r3, #160	; 0xa0
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	4013      	ands	r3, r2
 800297e:	d100      	bne.n	8002982 <HAL_UART_IRQHandler+0x2d2>
 8002980:	e11f      	b.n	8002bc2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2210      	movs	r2, #16
 8002988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	4013      	ands	r3, r2
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d000      	beq.n	800299a <HAL_UART_IRQHandler+0x2ea>
 8002998:	e0a4      	b.n	8002ae4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	238e      	movs	r3, #142	; 0x8e
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80029a8:	238e      	movs	r3, #142	; 0x8e
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d100      	bne.n	80029b4 <HAL_UART_IRQHandler+0x304>
 80029b2:	e14a      	b.n	8002c4a <HAL_UART_IRQHandler+0x59a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2258      	movs	r2, #88	; 0x58
 80029b8:	5a9b      	ldrh	r3, [r3, r2]
 80029ba:	228e      	movs	r2, #142	; 0x8e
 80029bc:	18ba      	adds	r2, r7, r2
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d300      	bcc.n	80029c6 <HAL_UART_IRQHandler+0x316>
 80029c4:	e141      	b.n	8002c4a <HAL_UART_IRQHandler+0x59a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	228e      	movs	r2, #142	; 0x8e
 80029ca:	18ba      	adds	r2, r7, r2
 80029cc:	215a      	movs	r1, #90	; 0x5a
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2220      	movs	r2, #32
 80029dc:	4013      	ands	r3, r2
 80029de:	d172      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x416>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029e8:	2288      	movs	r2, #136	; 0x88
 80029ea:	18ba      	adds	r2, r7, r2
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	f383 8810 	msr	PRIMASK, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	4996      	ldr	r1, [pc, #600]	; (8002c5c <HAL_UART_IRQHandler+0x5ac>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	2388      	movs	r3, #136	; 0x88
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a16:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1e:	2284      	movs	r2, #132	; 0x84
 8002a20:	18ba      	adds	r2, r7, r2
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	2301      	movs	r3, #1
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2a:	f383 8810 	msr	PRIMASK, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	2384      	movs	r3, #132	; 0x84
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
 8002a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a48:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a50:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	18ba      	adds	r2, r7, r2
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a60:	f383 8810 	msr	PRIMASK, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	438a      	bics	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7e:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a92:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a98:	2301      	movs	r3, #1
 8002a9a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9e:	f383 8810 	msr	PRIMASK, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	2110      	movs	r1, #16
 8002aae:	438a      	bics	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fe fa6f 	bl	8000fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2258      	movs	r2, #88	; 0x58
 8002aca:	5a9a      	ldrh	r2, [r3, r2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	215a      	movs	r1, #90	; 0x5a
 8002ad0:	5a5b      	ldrh	r3, [r3, r1]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0011      	movs	r1, r2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f8d1 	bl	8002c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae2:	e0b2      	b.n	8002c4a <HAL_UART_IRQHandler+0x59a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2258      	movs	r2, #88	; 0x58
 8002ae8:	5a99      	ldrh	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	225a      	movs	r2, #90	; 0x5a
 8002aee:	5a9b      	ldrh	r3, [r3, r2]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	237a      	movs	r3, #122	; 0x7a
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	1a8a      	subs	r2, r1, r2
 8002af8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	225a      	movs	r2, #90	; 0x5a
 8002afe:	5a9b      	ldrh	r3, [r3, r2]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <HAL_UART_IRQHandler+0x458>
 8002b06:	e0a2      	b.n	8002c4e <HAL_UART_IRQHandler+0x59e>
          && (nb_rx_data > 0U))
 8002b08:	237a      	movs	r3, #122	; 0x7a
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d100      	bne.n	8002b14 <HAL_UART_IRQHandler+0x464>
 8002b12:	e09c      	b.n	8002c4e <HAL_UART_IRQHandler+0x59e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b14:	f3ef 8310 	mrs	r3, PRIMASK
 8002b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b1e:	2301      	movs	r3, #1
 8002b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f383 8810 	msr	PRIMASK, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	494b      	ldr	r1, [pc, #300]	; (8002c60 <HAL_UART_IRQHandler+0x5b0>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b42:	f3ef 8310 	mrs	r3, PRIMASK
 8002b46:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b48:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f383 8810 	msr	PRIMASK, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	2101      	movs	r1, #1
 8002b62:	438a      	bics	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b82:	f3ef 8310 	mrs	r3, PRIMASK
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	f383 8810 	msr	PRIMASK, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bb0:	237a      	movs	r3, #122	; 0x7a
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f862 	bl	8002c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bc0:	e045      	b.n	8002c4e <HAL_UART_IRQHandler+0x59e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bc2:	23a4      	movs	r3, #164	; 0xa4
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	035b      	lsls	r3, r3, #13
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d010      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x542>
 8002bd0:	239c      	movs	r3, #156	; 0x9c
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	03db      	lsls	r3, r3, #15
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	0352      	lsls	r2, r2, #13
 8002be6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 ff54 	bl	8003a98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bf0:	e030      	b.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bf2:	23a4      	movs	r3, #164	; 0xa4
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bfe:	23a0      	movs	r3, #160	; 0xa0
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	4013      	ands	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01f      	beq.n	8002c52 <HAL_UART_IRQHandler+0x5a2>
    {
      huart->TxISR(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	0010      	movs	r0, r2
 8002c1a:	4798      	blx	r3
    }
    return;
 8002c1c:	e019      	b.n	8002c52 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c1e:	23a4      	movs	r3, #164	; 0xa4
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	4013      	ands	r3, r2
 8002c28:	d014      	beq.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
 8002c2a:	23a0      	movs	r3, #160	; 0xa0
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	4013      	ands	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
  {
    UART_EndTransmit_IT(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fda4 	bl	8003786 <UART_EndTransmit_IT>
    return;
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	e008      	b.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
      return;
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	e006      	b.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
    return;
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	e004      	b.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
      return;
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	e002      	b.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
      return;
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	e000      	b.n	8002c54 <HAL_UART_IRQHandler+0x5a4>
    return;
 8002c52:	46c0      	nop			; (mov r8, r8)
  }

}
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b02a      	add	sp, #168	; 0xa8
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffffeff 	.word	0xfffffeff
 8002c60:	fffffedf 	.word	0xfffffedf

08002c64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	000a      	movs	r2, r1
 8002c8e:	1cbb      	adds	r3, r7, #2
 8002c90:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b08e      	sub	sp, #56	; 0x38
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca4:	231a      	movs	r3, #26
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	4694      	mov	ip, r2
 8002caa:	44bc      	add	ip, r7
 8002cac:	4463      	add	r3, ip
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	49ca      	ldr	r1, [pc, #808]	; (8003000 <UART_SetConfig+0x364>)
 8002cd6:	4011      	ands	r1, r2
 8002cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	6852      	ldr	r2, [r2, #4]
 8002ce8:	49c6      	ldr	r1, [pc, #792]	; (8003004 <UART_SetConfig+0x368>)
 8002cea:	4011      	ands	r1, r2
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	68d2      	ldr	r2, [r2, #12]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4ac2      	ldr	r2, [pc, #776]	; (8003008 <UART_SetConfig+0x36c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	49bc      	ldr	r1, [pc, #752]	; (800300c <UART_SetConfig+0x370>)
 8002d1a:	4011      	ands	r1, r2
 8002d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4aba      	ldr	r2, [pc, #744]	; (8003010 <UART_SetConfig+0x374>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d134      	bne.n	8002d96 <UART_SetConfig+0xfa>
 8002d2c:	4bb9      	ldr	r3, [pc, #740]	; (8003014 <UART_SetConfig+0x378>)
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	2203      	movs	r2, #3
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d015      	beq.n	8002d64 <UART_SetConfig+0xc8>
 8002d38:	d304      	bcc.n	8002d44 <UART_SetConfig+0xa8>
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d00a      	beq.n	8002d54 <UART_SetConfig+0xb8>
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d018      	beq.n	8002d74 <UART_SetConfig+0xd8>
 8002d42:	e01f      	b.n	8002d84 <UART_SetConfig+0xe8>
 8002d44:	231b      	movs	r3, #27
 8002d46:	2218      	movs	r2, #24
 8002d48:	4694      	mov	ip, r2
 8002d4a:	44bc      	add	ip, r7
 8002d4c:	4463      	add	r3, ip
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e0ab      	b.n	8002eac <UART_SetConfig+0x210>
 8002d54:	231b      	movs	r3, #27
 8002d56:	2218      	movs	r2, #24
 8002d58:	4694      	mov	ip, r2
 8002d5a:	44bc      	add	ip, r7
 8002d5c:	4463      	add	r3, ip
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e0a3      	b.n	8002eac <UART_SetConfig+0x210>
 8002d64:	231b      	movs	r3, #27
 8002d66:	2218      	movs	r2, #24
 8002d68:	4694      	mov	ip, r2
 8002d6a:	44bc      	add	ip, r7
 8002d6c:	4463      	add	r3, ip
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e09b      	b.n	8002eac <UART_SetConfig+0x210>
 8002d74:	231b      	movs	r3, #27
 8002d76:	2218      	movs	r2, #24
 8002d78:	4694      	mov	ip, r2
 8002d7a:	44bc      	add	ip, r7
 8002d7c:	4463      	add	r3, ip
 8002d7e:	2208      	movs	r2, #8
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e093      	b.n	8002eac <UART_SetConfig+0x210>
 8002d84:	231b      	movs	r3, #27
 8002d86:	2218      	movs	r2, #24
 8002d88:	4694      	mov	ip, r2
 8002d8a:	44bc      	add	ip, r7
 8002d8c:	4463      	add	r3, ip
 8002d8e:	2210      	movs	r2, #16
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	e08a      	b.n	8002eac <UART_SetConfig+0x210>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a9f      	ldr	r2, [pc, #636]	; (8003018 <UART_SetConfig+0x37c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d137      	bne.n	8002e10 <UART_SetConfig+0x174>
 8002da0:	4b9c      	ldr	r3, [pc, #624]	; (8003014 <UART_SetConfig+0x378>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	220c      	movs	r2, #12
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d018      	beq.n	8002dde <UART_SetConfig+0x142>
 8002dac:	d802      	bhi.n	8002db4 <UART_SetConfig+0x118>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <UART_SetConfig+0x122>
 8002db2:	e024      	b.n	8002dfe <UART_SetConfig+0x162>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d00a      	beq.n	8002dce <UART_SetConfig+0x132>
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d018      	beq.n	8002dee <UART_SetConfig+0x152>
 8002dbc:	e01f      	b.n	8002dfe <UART_SetConfig+0x162>
 8002dbe:	231b      	movs	r3, #27
 8002dc0:	2218      	movs	r2, #24
 8002dc2:	4694      	mov	ip, r2
 8002dc4:	44bc      	add	ip, r7
 8002dc6:	4463      	add	r3, ip
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e06e      	b.n	8002eac <UART_SetConfig+0x210>
 8002dce:	231b      	movs	r3, #27
 8002dd0:	2218      	movs	r2, #24
 8002dd2:	4694      	mov	ip, r2
 8002dd4:	44bc      	add	ip, r7
 8002dd6:	4463      	add	r3, ip
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	e066      	b.n	8002eac <UART_SetConfig+0x210>
 8002dde:	231b      	movs	r3, #27
 8002de0:	2218      	movs	r2, #24
 8002de2:	4694      	mov	ip, r2
 8002de4:	44bc      	add	ip, r7
 8002de6:	4463      	add	r3, ip
 8002de8:	2204      	movs	r2, #4
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e05e      	b.n	8002eac <UART_SetConfig+0x210>
 8002dee:	231b      	movs	r3, #27
 8002df0:	2218      	movs	r2, #24
 8002df2:	4694      	mov	ip, r2
 8002df4:	44bc      	add	ip, r7
 8002df6:	4463      	add	r3, ip
 8002df8:	2208      	movs	r2, #8
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e056      	b.n	8002eac <UART_SetConfig+0x210>
 8002dfe:	231b      	movs	r3, #27
 8002e00:	2218      	movs	r2, #24
 8002e02:	4694      	mov	ip, r2
 8002e04:	44bc      	add	ip, r7
 8002e06:	4463      	add	r3, ip
 8002e08:	2210      	movs	r2, #16
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	e04d      	b.n	8002eac <UART_SetConfig+0x210>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <UART_SetConfig+0x36c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d141      	bne.n	8002e9e <UART_SetConfig+0x202>
 8002e1a:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <UART_SetConfig+0x378>)
 8002e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1e:	23c0      	movs	r3, #192	; 0xc0
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	00d2      	lsls	r2, r2, #3
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01f      	beq.n	8002e6c <UART_SetConfig+0x1d0>
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	00d2      	lsls	r2, r2, #3
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d802      	bhi.n	8002e3a <UART_SetConfig+0x19e>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <UART_SetConfig+0x1b0>
 8002e38:	e028      	b.n	8002e8c <UART_SetConfig+0x1f0>
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00c      	beq.n	8002e5c <UART_SetConfig+0x1c0>
 8002e42:	22c0      	movs	r2, #192	; 0xc0
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d018      	beq.n	8002e7c <UART_SetConfig+0x1e0>
 8002e4a:	e01f      	b.n	8002e8c <UART_SetConfig+0x1f0>
 8002e4c:	231b      	movs	r3, #27
 8002e4e:	2218      	movs	r2, #24
 8002e50:	4694      	mov	ip, r2
 8002e52:	44bc      	add	ip, r7
 8002e54:	4463      	add	r3, ip
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e027      	b.n	8002eac <UART_SetConfig+0x210>
 8002e5c:	231b      	movs	r3, #27
 8002e5e:	2218      	movs	r2, #24
 8002e60:	4694      	mov	ip, r2
 8002e62:	44bc      	add	ip, r7
 8002e64:	4463      	add	r3, ip
 8002e66:	2202      	movs	r2, #2
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e01f      	b.n	8002eac <UART_SetConfig+0x210>
 8002e6c:	231b      	movs	r3, #27
 8002e6e:	2218      	movs	r2, #24
 8002e70:	4694      	mov	ip, r2
 8002e72:	44bc      	add	ip, r7
 8002e74:	4463      	add	r3, ip
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e017      	b.n	8002eac <UART_SetConfig+0x210>
 8002e7c:	231b      	movs	r3, #27
 8002e7e:	2218      	movs	r2, #24
 8002e80:	4694      	mov	ip, r2
 8002e82:	44bc      	add	ip, r7
 8002e84:	4463      	add	r3, ip
 8002e86:	2208      	movs	r2, #8
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e00f      	b.n	8002eac <UART_SetConfig+0x210>
 8002e8c:	231b      	movs	r3, #27
 8002e8e:	2218      	movs	r2, #24
 8002e90:	4694      	mov	ip, r2
 8002e92:	44bc      	add	ip, r7
 8002e94:	4463      	add	r3, ip
 8002e96:	2210      	movs	r2, #16
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	e006      	b.n	8002eac <UART_SetConfig+0x210>
 8002e9e:	231b      	movs	r3, #27
 8002ea0:	2218      	movs	r2, #24
 8002ea2:	4694      	mov	ip, r2
 8002ea4:	44bc      	add	ip, r7
 8002ea6:	4463      	add	r3, ip
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a55      	ldr	r2, [pc, #340]	; (8003008 <UART_SetConfig+0x36c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d000      	beq.n	8002eb8 <UART_SetConfig+0x21c>
 8002eb6:	e085      	b.n	8002fc4 <UART_SetConfig+0x328>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eb8:	231b      	movs	r3, #27
 8002eba:	2218      	movs	r2, #24
 8002ebc:	4694      	mov	ip, r2
 8002ebe:	44bc      	add	ip, r7
 8002ec0:	4463      	add	r3, ip
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d00d      	beq.n	8002ee4 <UART_SetConfig+0x248>
 8002ec8:	dc02      	bgt.n	8002ed0 <UART_SetConfig+0x234>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <UART_SetConfig+0x23e>
 8002ece:	e01d      	b.n	8002f0c <UART_SetConfig+0x270>
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d012      	beq.n	8002efa <UART_SetConfig+0x25e>
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d015      	beq.n	8002f04 <UART_SetConfig+0x268>
 8002ed8:	e018      	b.n	8002f0c <UART_SetConfig+0x270>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eda:	f7ff f8fd 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ee2:	e01d      	b.n	8002f20 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <UART_SetConfig+0x378>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	4013      	ands	r3, r2
 8002eec:	d002      	beq.n	8002ef4 <UART_SetConfig+0x258>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eee:	4b4b      	ldr	r3, [pc, #300]	; (800301c <UART_SetConfig+0x380>)
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ef2:	e015      	b.n	8002f20 <UART_SetConfig+0x284>
          pclk = (uint32_t) HSI_VALUE;
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <UART_SetConfig+0x384>)
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ef8:	e012      	b.n	8002f20 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efa:	f7ff f841 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8002efe:	0003      	movs	r3, r0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f02:	e00d      	b.n	8002f20 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f0a:	e009      	b.n	8002f20 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f10:	231a      	movs	r3, #26
 8002f12:	2218      	movs	r2, #24
 8002f14:	4694      	mov	ip, r2
 8002f16:	44bc      	add	ip, r7
 8002f18:	4463      	add	r3, ip
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
        break;
 8002f1e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d100      	bne.n	8002f28 <UART_SetConfig+0x28c>
 8002f26:	e143      	b.n	80031b0 <UART_SetConfig+0x514>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	189a      	adds	r2, r3, r2
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d805      	bhi.n	8002f44 <UART_SetConfig+0x2a8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d207      	bcs.n	8002f54 <UART_SetConfig+0x2b8>
      {
        ret = HAL_ERROR;
 8002f44:	231a      	movs	r3, #26
 8002f46:	2218      	movs	r2, #24
 8002f48:	4694      	mov	ip, r2
 8002f4a:	44bc      	add	ip, r7
 8002f4c:	4463      	add	r3, ip
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e12d      	b.n	80031b0 <UART_SetConfig+0x514>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	6939      	ldr	r1, [r7, #16]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	000b      	movs	r3, r1
 8002f62:	0e1b      	lsrs	r3, r3, #24
 8002f64:	0010      	movs	r0, r2
 8002f66:	0205      	lsls	r5, r0, #8
 8002f68:	431d      	orrs	r5, r3
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	021c      	lsls	r4, r3, #8
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	1900      	adds	r0, r0, r4
 8002f80:	4169      	adcs	r1, r5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f7fd f946 	bl	8000220 <__aeabi_uldivmod>
 8002f94:	0003      	movs	r3, r0
 8002f96:	000c      	movs	r4, r1
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <UART_SetConfig+0x388>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d908      	bls.n	8002fb4 <UART_SetConfig+0x318>
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <UART_SetConfig+0x38c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d804      	bhi.n	8002fb4 <UART_SetConfig+0x318>
        {
          huart->Instance->BRR = usartdiv;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	e0fd      	b.n	80031b0 <UART_SetConfig+0x514>
        }
        else
        {
          ret = HAL_ERROR;
 8002fb4:	231a      	movs	r3, #26
 8002fb6:	2218      	movs	r2, #24
 8002fb8:	4694      	mov	ip, r2
 8002fba:	44bc      	add	ip, r7
 8002fbc:	4463      	add	r3, ip
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e0f5      	b.n	80031b0 <UART_SetConfig+0x514>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d000      	beq.n	8002fd2 <UART_SetConfig+0x336>
 8002fd0:	e095      	b.n	80030fe <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8002fd2:	231b      	movs	r3, #27
 8002fd4:	2218      	movs	r2, #24
 8002fd6:	4694      	mov	ip, r2
 8002fd8:	44bc      	add	ip, r7
 8002fda:	4463      	add	r3, ip
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d83a      	bhi.n	8003058 <UART_SetConfig+0x3bc>
 8002fe2:	009a      	lsls	r2, r3, #2
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <UART_SetConfig+0x390>)
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7ff f874 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff4:	e03a      	b.n	800306c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff6:	f7ff f885 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ffe:	e035      	b.n	800306c <UART_SetConfig+0x3d0>
 8003000:	efff69f3 	.word	0xefff69f3
 8003004:	ffffcfff 	.word	0xffffcfff
 8003008:	40004800 	.word	0x40004800
 800300c:	fffff4ff 	.word	0xfffff4ff
 8003010:	40013800 	.word	0x40013800
 8003014:	40021000 	.word	0x40021000
 8003018:	40004400 	.word	0x40004400
 800301c:	003d0900 	.word	0x003d0900
 8003020:	00f42400 	.word	0x00f42400
 8003024:	000002ff 	.word	0x000002ff
 8003028:	000fffff 	.word	0x000fffff
 800302c:	08003b90 	.word	0x08003b90
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003030:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <UART_SetConfig+0x534>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2210      	movs	r2, #16
 8003036:	4013      	ands	r3, r2
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0x3a4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800303a:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <UART_SetConfig+0x538>)
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800303e:	e015      	b.n	800306c <UART_SetConfig+0x3d0>
          pclk = (uint32_t) HSI_VALUE;
 8003040:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <UART_SetConfig+0x53c>)
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003044:	e012      	b.n	800306c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7fe ff9b 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 800304a:	0003      	movs	r3, r0
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800304e:	e00d      	b.n	800306c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003056:	e009      	b.n	800306c <UART_SetConfig+0x3d0>
      default:
        pclk = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800305c:	231a      	movs	r3, #26
 800305e:	2218      	movs	r2, #24
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
        break;
 800306a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d100      	bne.n	8003074 <UART_SetConfig+0x3d8>
 8003072:	e09d      	b.n	80031b0 <UART_SetConfig+0x514>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	005a      	lsls	r2, r3, #1
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	18d2      	adds	r2, r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0019      	movs	r1, r3
 8003086:	0010      	movs	r0, r2
 8003088:	f7fd f83e 	bl	8000108 <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	b29b      	uxth	r3, r3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d92a      	bls.n	80030ee <UART_SetConfig+0x452>
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	4a50      	ldr	r2, [pc, #320]	; (80031dc <UART_SetConfig+0x540>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d826      	bhi.n	80030ee <UART_SetConfig+0x452>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	230e      	movs	r3, #14
 80030a6:	2118      	movs	r1, #24
 80030a8:	468c      	mov	ip, r1
 80030aa:	44bc      	add	ip, r7
 80030ac:	4463      	add	r3, ip
 80030ae:	210f      	movs	r1, #15
 80030b0:	438a      	bics	r2, r1
 80030b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2207      	movs	r2, #7
 80030bc:	4013      	ands	r3, r2
 80030be:	b299      	uxth	r1, r3
 80030c0:	230e      	movs	r3, #14
 80030c2:	2218      	movs	r2, #24
 80030c4:	4694      	mov	ip, r2
 80030c6:	44bc      	add	ip, r7
 80030c8:	4463      	add	r3, ip
 80030ca:	220e      	movs	r2, #14
 80030cc:	2018      	movs	r0, #24
 80030ce:	4684      	mov	ip, r0
 80030d0:	44bc      	add	ip, r7
 80030d2:	4462      	add	r2, ip
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	220e      	movs	r2, #14
 80030e0:	2118      	movs	r1, #24
 80030e2:	468c      	mov	ip, r1
 80030e4:	44bc      	add	ip, r7
 80030e6:	4462      	add	r2, ip
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	e060      	b.n	80031b0 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 80030ee:	231a      	movs	r3, #26
 80030f0:	2218      	movs	r2, #24
 80030f2:	4694      	mov	ip, r2
 80030f4:	44bc      	add	ip, r7
 80030f6:	4463      	add	r3, ip
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e058      	b.n	80031b0 <UART_SetConfig+0x514>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030fe:	231b      	movs	r3, #27
 8003100:	2218      	movs	r2, #24
 8003102:	4694      	mov	ip, r2
 8003104:	44bc      	add	ip, r7
 8003106:	4463      	add	r3, ip
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d822      	bhi.n	8003154 <UART_SetConfig+0x4b8>
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <UART_SetConfig+0x544>)
 8003112:	18d3      	adds	r3, r2, r3
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe ffde 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 800311c:	0003      	movs	r3, r0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003120:	e022      	b.n	8003168 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003122:	f7fe ffef 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8003126:	0003      	movs	r3, r0
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800312a:	e01d      	b.n	8003168 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <UART_SetConfig+0x534>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2210      	movs	r2, #16
 8003132:	4013      	ands	r3, r2
 8003134:	d002      	beq.n	800313c <UART_SetConfig+0x4a0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <UART_SetConfig+0x538>)
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800313a:	e015      	b.n	8003168 <UART_SetConfig+0x4cc>
          pclk = (uint32_t) HSI_VALUE;
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <UART_SetConfig+0x53c>)
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003140:	e012      	b.n	8003168 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7fe ff1d 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003146:	0003      	movs	r3, r0
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800314a:	e00d      	b.n	8003168 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003152:	e009      	b.n	8003168 <UART_SetConfig+0x4cc>
      default:
        pclk = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003158:	231a      	movs	r3, #26
 800315a:	2218      	movs	r2, #24
 800315c:	4694      	mov	ip, r2
 800315e:	44bc      	add	ip, r7
 8003160:	4463      	add	r3, ip
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
        break;
 8003166:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <UART_SetConfig+0x514>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	085a      	lsrs	r2, r3, #1
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	18d2      	adds	r2, r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0019      	movs	r1, r3
 800317e:	0010      	movs	r0, r2
 8003180:	f7fc ffc2 	bl	8000108 <__udivsi3>
 8003184:	0003      	movs	r3, r0
 8003186:	b29b      	uxth	r3, r3
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d908      	bls.n	80031a2 <UART_SetConfig+0x506>
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <UART_SetConfig+0x540>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d804      	bhi.n	80031a2 <UART_SetConfig+0x506>
      {
        huart->Instance->BRR = usartdiv;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	e006      	b.n	80031b0 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 80031a2:	231a      	movs	r3, #26
 80031a4:	2218      	movs	r2, #24
 80031a6:	4694      	mov	ip, r2
 80031a8:	44bc      	add	ip, r7
 80031aa:	4463      	add	r3, ip
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2200      	movs	r2, #0
 80031b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2200      	movs	r2, #0
 80031ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031bc:	231a      	movs	r3, #26
 80031be:	2218      	movs	r2, #24
 80031c0:	4694      	mov	ip, r2
 80031c2:	44bc      	add	ip, r7
 80031c4:	4463      	add	r3, ip
 80031c6:	781b      	ldrb	r3, [r3, #0]
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b00e      	add	sp, #56	; 0x38
 80031ce:	bdb0      	pop	{r4, r5, r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	003d0900 	.word	0x003d0900
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	0000ffff 	.word	0x0000ffff
 80031e0:	08003bb4 	.word	0x08003bb4

080031e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	6852      	ldr	r2, [r2, #4]
 8003200:	4945      	ldr	r1, [pc, #276]	; (8003318 <UART_AdvFeatureConfig+0x134>)
 8003202:	4011      	ands	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2202      	movs	r2, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d00a      	beq.n	800322c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	493e      	ldr	r1, [pc, #248]	; (800331c <UART_AdvFeatureConfig+0x138>)
 8003222:	4011      	ands	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2204      	movs	r2, #4
 8003232:	4013      	ands	r3, r2
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	6852      	ldr	r2, [r2, #4]
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <UART_AdvFeatureConfig+0x13c>)
 8003242:	4011      	ands	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2208      	movs	r2, #8
 8003252:	4013      	ands	r3, r2
 8003254:	d00a      	beq.n	800326c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	6852      	ldr	r2, [r2, #4]
 8003260:	4930      	ldr	r1, [pc, #192]	; (8003324 <UART_AdvFeatureConfig+0x140>)
 8003262:	4011      	ands	r1, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	6892      	ldr	r2, [r2, #8]
 8003280:	4929      	ldr	r1, [pc, #164]	; (8003328 <UART_AdvFeatureConfig+0x144>)
 8003282:	4011      	ands	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2220      	movs	r2, #32
 8003292:	4013      	ands	r3, r2
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	6892      	ldr	r2, [r2, #8]
 80032a0:	4922      	ldr	r1, [pc, #136]	; (800332c <UART_AdvFeatureConfig+0x148>)
 80032a2:	4011      	ands	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2240      	movs	r2, #64	; 0x40
 80032b2:	4013      	ands	r3, r2
 80032b4:	d01b      	beq.n	80032ee <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	6852      	ldr	r2, [r2, #4]
 80032c0:	491b      	ldr	r1, [pc, #108]	; (8003330 <UART_AdvFeatureConfig+0x14c>)
 80032c2:	4011      	ands	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	035b      	lsls	r3, r3, #13
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d10a      	bne.n	80032ee <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	6852      	ldr	r2, [r2, #4]
 80032e2:	4914      	ldr	r1, [pc, #80]	; (8003334 <UART_AdvFeatureConfig+0x150>)
 80032e4:	4011      	ands	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	4013      	ands	r3, r2
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	6852      	ldr	r2, [r2, #4]
 8003302:	490d      	ldr	r1, [pc, #52]	; (8003338 <UART_AdvFeatureConfig+0x154>)
 8003304:	4011      	ands	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	fffdffff 	.word	0xfffdffff
 800331c:	fffeffff 	.word	0xfffeffff
 8003320:	fffbffff 	.word	0xfffbffff
 8003324:	ffff7fff 	.word	0xffff7fff
 8003328:	ffffefff 	.word	0xffffefff
 800332c:	ffffdfff 	.word	0xffffdfff
 8003330:	ffefffff 	.word	0xffefffff
 8003334:	ff9fffff 	.word	0xff9fffff
 8003338:	fff7ffff 	.word	0xfff7ffff

0800333c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	2100      	movs	r1, #0
 800334a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800334c:	f7fd fca6 	bl	8000c9c <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2208      	movs	r2, #8
 800335c:	4013      	ands	r3, r2
 800335e:	2b08      	cmp	r3, #8
 8003360:	d10d      	bne.n	800337e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	0399      	lsls	r1, r3, #14
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <UART_CheckIdleState+0x90>)
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	0013      	movs	r3, r2
 8003370:	2200      	movs	r2, #0
 8003372:	f000 f82d 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d001      	beq.n	800337e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e022      	b.n	80033c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2204      	movs	r2, #4
 8003386:	4013      	ands	r3, r2
 8003388:	2b04      	cmp	r3, #4
 800338a:	d10d      	bne.n	80033a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	03d9      	lsls	r1, r3, #15
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_CheckIdleState+0x90>)
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	0013      	movs	r3, r2
 800339a:	2200      	movs	r2, #0
 800339c:	f000 f818 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d001      	beq.n	80033a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e00d      	b.n	80033c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2274      	movs	r2, #116	; 0x74
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	01ffffff 	.word	0x01ffffff

080033d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b094      	sub	sp, #80	; 0x50
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e0:	e09b      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e4:	3301      	adds	r3, #1
 80033e6:	d100      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80033e8:	e097      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7fd fc57 	bl	8000c9c <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d802      	bhi.n	8003400 <UART_WaitOnFlagUntilTimeout+0x30>
 80033fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d139      	bne.n	8003474 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003400:	f3ef 8310 	mrs	r3, PRIMASK
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003408:	647b      	str	r3, [r7, #68]	; 0x44
 800340a:	2301      	movs	r3, #1
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	f383 8810 	msr	PRIMASK, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	4949      	ldr	r1, [pc, #292]	; (8003544 <UART_WaitOnFlagUntilTimeout+0x174>)
 8003420:	400a      	ands	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342e:	f3ef 8310 	mrs	r3, PRIMASK
 8003432:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	643b      	str	r3, [r7, #64]	; 0x40
 8003438:	2301      	movs	r3, #1
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	f383 8810 	msr	PRIMASK, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	6892      	ldr	r2, [r2, #8]
 800344c:	2101      	movs	r1, #1
 800344e:	438a      	bics	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2274      	movs	r2, #116	; 0x74
 800346c:	2100      	movs	r1, #0
 800346e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e063      	b.n	800353c <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2204      	movs	r2, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d04c      	beq.n	800351a <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	401a      	ands	r2, r3
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	429a      	cmp	r2, r3
 8003492:	d142      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	613b      	str	r3, [r7, #16]
  return(result);
 80034a4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	2301      	movs	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f383 8810 	msr	PRIMASK, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	4921      	ldr	r1, [pc, #132]	; (8003544 <UART_WaitOnFlagUntilTimeout+0x174>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034cc:	f3ef 8310 	mrs	r3, PRIMASK
 80034d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80034d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d6:	2301      	movs	r3, #1
 80034d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f383 8810 	msr	PRIMASK, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	2101      	movs	r1, #1
 80034ec:	438a      	bics	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	2120      	movs	r1, #32
 800350c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2274      	movs	r2, #116	; 0x74
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e010      	b.n	800353c <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	425a      	negs	r2, r3
 800352a:	4153      	adcs	r3, r2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	001a      	movs	r2, r3
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d100      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x16a>
 8003538:	e753      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b014      	add	sp, #80	; 0x50
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fffffe5f 	.word	0xfffffe5f

08003548 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	; 0x30
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	1dbb      	adds	r3, r7, #6
 8003554:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1dba      	adds	r2, r7, #6
 8003560:	2158      	movs	r1, #88	; 0x58
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1dba      	adds	r2, r7, #6
 800356a:	215a      	movs	r1, #90	; 0x5a
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	429a      	cmp	r2, r3
 8003580:	d10d      	bne.n	800359e <UART_Start_Receive_IT+0x56>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <UART_Start_Receive_IT+0x4c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	225c      	movs	r2, #92	; 0x5c
 800358e:	4941      	ldr	r1, [pc, #260]	; (8003694 <UART_Start_Receive_IT+0x14c>)
 8003590:	5299      	strh	r1, [r3, r2]
 8003592:	e02e      	b.n	80035f2 <UART_Start_Receive_IT+0xaa>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	225c      	movs	r2, #92	; 0x5c
 8003598:	21ff      	movs	r1, #255	; 0xff
 800359a:	5299      	strh	r1, [r3, r2]
 800359c:	e029      	b.n	80035f2 <UART_Start_Receive_IT+0xaa>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <UART_Start_Receive_IT+0x7a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <UART_Start_Receive_IT+0x70>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	225c      	movs	r2, #92	; 0x5c
 80035b2:	21ff      	movs	r1, #255	; 0xff
 80035b4:	5299      	strh	r1, [r3, r2]
 80035b6:	e01c      	b.n	80035f2 <UART_Start_Receive_IT+0xaa>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	225c      	movs	r2, #92	; 0x5c
 80035bc:	217f      	movs	r1, #127	; 0x7f
 80035be:	5299      	strh	r1, [r3, r2]
 80035c0:	e017      	b.n	80035f2 <UART_Start_Receive_IT+0xaa>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	055b      	lsls	r3, r3, #21
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10d      	bne.n	80035ea <UART_Start_Receive_IT+0xa2>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d104      	bne.n	80035e0 <UART_Start_Receive_IT+0x98>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	225c      	movs	r2, #92	; 0x5c
 80035da:	217f      	movs	r1, #127	; 0x7f
 80035dc:	5299      	strh	r1, [r3, r2]
 80035de:	e008      	b.n	80035f2 <UART_Start_Receive_IT+0xaa>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	225c      	movs	r2, #92	; 0x5c
 80035e4:	213f      	movs	r1, #63	; 0x3f
 80035e6:	5299      	strh	r1, [r3, r2]
 80035e8:	e003      	b.n	80035f2 <UART_Start_Receive_IT+0xaa>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	225c      	movs	r2, #92	; 0x5c
 80035ee:	2100      	movs	r1, #0
 80035f0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	2100      	movs	r1, #0
 80035f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2222      	movs	r2, #34	; 0x22
 80035fe:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003600:	f3ef 8310 	mrs	r3, PRIMASK
 8003604:	61fb      	str	r3, [r7, #28]
  return(result);
 8003606:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	2301      	movs	r3, #1
 800360c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f383 8810 	msr	PRIMASK, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	2101      	movs	r1, #1
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	429a      	cmp	r2, r3
 8003638:	d107      	bne.n	800364a <UART_Start_Receive_IT+0x102>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <UART_Start_Receive_IT+0x150>)
 8003646:	665a      	str	r2, [r3, #100]	; 0x64
 8003648:	e002      	b.n	8003650 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a13      	ldr	r2, [pc, #76]	; (800369c <UART_Start_Receive_IT+0x154>)
 800364e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2274      	movs	r2, #116	; 0x74
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003658:	f3ef 8310 	mrs	r3, PRIMASK
 800365c:	613b      	str	r3, [r7, #16]
  return(result);
 800365e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	2301      	movs	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f383 8810 	msr	PRIMASK, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	2190      	movs	r1, #144	; 0x90
 8003678:	0049      	lsls	r1, r1, #1
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b00c      	add	sp, #48	; 0x30
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	000001ff 	.word	0x000001ff
 8003698:	08003939 	.word	0x08003939
 800369c:	080037d9 	.word	0x080037d9

080036a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ac:	617b      	str	r3, [r7, #20]
  return(result);
 80036ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f383 8810 	msr	PRIMASK, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4923      	ldr	r1, [pc, #140]	; (8003754 <UART_EndRxTransfer+0xb4>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d6:	f3ef 8310 	mrs	r3, PRIMASK
 80036da:	623b      	str	r3, [r7, #32]
  return(result);
 80036dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
 80036e0:	2301      	movs	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f383 8810 	msr	PRIMASK, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	6892      	ldr	r2, [r2, #8]
 80036f4:	2101      	movs	r1, #1
 80036f6:	438a      	bics	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	2b01      	cmp	r3, #1
 800370a:	d116      	bne.n	800373a <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370c:	f3ef 8310 	mrs	r3, PRIMASK
 8003710:	60bb      	str	r3, [r7, #8]
  return(result);
 8003712:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003716:	2301      	movs	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f383 8810 	msr	PRIMASK, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	2110      	movs	r1, #16
 800372c:	438a      	bics	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b00e      	add	sp, #56	; 0x38
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fffffedf 	.word	0xfffffedf

08003758 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	225a      	movs	r2, #90	; 0x5a
 800376a:	2100      	movs	r1, #0
 800376c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2252      	movs	r2, #82	; 0x52
 8003772:	2100      	movs	r1, #0
 8003774:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0018      	movs	r0, r3
 800377a:	f7ff fa7b 	bl	8002c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378e:	f3ef 8310 	mrs	r3, PRIMASK
 8003792:	60bb      	str	r3, [r7, #8]
  return(result);
 8003794:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	2301      	movs	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f383 8810 	msr	PRIMASK, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	438a      	bics	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff fa4a 	bl	8002c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	; 0x40
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037e0:	233e      	movs	r3, #62	; 0x3e
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	215c      	movs	r1, #92	; 0x5c
 80037e8:	5a52      	ldrh	r2, [r2, r1]
 80037ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f0:	2b22      	cmp	r3, #34	; 0x22
 80037f2:	d000      	beq.n	80037f6 <UART_RxISR_8BIT+0x1e>
 80037f4:	e091      	b.n	800391a <UART_RxISR_8BIT+0x142>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fc:	233c      	movs	r3, #60	; 0x3c
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	223c      	movs	r2, #60	; 0x3c
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	213e      	movs	r1, #62	; 0x3e
 8003810:	1879      	adds	r1, r7, r1
 8003812:	8809      	ldrh	r1, [r1, #0]
 8003814:	b2c9      	uxtb	r1, r1
 8003816:	400a      	ands	r2, r1
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	225a      	movs	r2, #90	; 0x5a
 800382a:	5a9b      	ldrh	r3, [r3, r2]
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b299      	uxth	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	225a      	movs	r2, #90	; 0x5a
 8003836:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	225a      	movs	r2, #90	; 0x5a
 800383c:	5a9b      	ldrh	r3, [r3, r2]
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d172      	bne.n	800392a <UART_RxISR_8BIT+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003844:	f3ef 8310 	mrs	r3, PRIMASK
 8003848:	61bb      	str	r3, [r7, #24]
  return(result);
 800384a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
 800384e:	2301      	movs	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f383 8810 	msr	PRIMASK, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	4934      	ldr	r1, [pc, #208]	; (8003934 <UART_RxISR_8BIT+0x15c>)
 8003864:	400a      	ands	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003872:	f3ef 8310 	mrs	r3, PRIMASK
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	2301      	movs	r3, #1
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	f383 8810 	msr	PRIMASK, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	6892      	ldr	r2, [r2, #8]
 8003890:	2101      	movs	r1, #1
 8003892:	438a      	bics	r2, r1
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d12d      	bne.n	8003910 <UART_RxISR_8BIT+0x138>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ba:	f3ef 8310 	mrs	r3, PRIMASK
 80038be:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f383 8810 	msr	PRIMASK, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	2110      	movs	r1, #16
 80038da:	438a      	bics	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	2210      	movs	r2, #16
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d103      	bne.n	80038fe <UART_RxISR_8BIT+0x126>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2210      	movs	r2, #16
 80038fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2258      	movs	r2, #88	; 0x58
 8003902:	5a9a      	ldrh	r2, [r3, r2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff f9bb 	bl	8002c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800390e:	e00c      	b.n	800392a <UART_RxISR_8BIT+0x152>
        HAL_UART_RxCpltCallback(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0018      	movs	r0, r3
 8003914:	f7fd f83e 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 8003918:	e007      	b.n	800392a <UART_RxISR_8BIT+0x152>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	6992      	ldr	r2, [r2, #24]
 8003924:	2108      	movs	r1, #8
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b010      	add	sp, #64	; 0x40
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	fffffedf 	.word	0xfffffedf

08003938 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b090      	sub	sp, #64	; 0x40
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003940:	233e      	movs	r3, #62	; 0x3e
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	215c      	movs	r1, #92	; 0x5c
 8003948:	5a52      	ldrh	r2, [r2, r1]
 800394a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003950:	2b22      	cmp	r3, #34	; 0x22
 8003952:	d000      	beq.n	8003956 <UART_RxISR_16BIT+0x1e>
 8003954:	e091      	b.n	8003a7a <UART_RxISR_16BIT+0x142>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395c:	233c      	movs	r3, #60	; 0x3c
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003968:	233c      	movs	r3, #60	; 0x3c
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	223e      	movs	r2, #62	; 0x3e
 800396e:	18ba      	adds	r2, r7, r2
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	8812      	ldrh	r2, [r2, #0]
 8003974:	4013      	ands	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	225a      	movs	r2, #90	; 0x5a
 800398a:	5a9b      	ldrh	r3, [r3, r2]
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b299      	uxth	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	225a      	movs	r2, #90	; 0x5a
 8003996:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	225a      	movs	r2, #90	; 0x5a
 800399c:	5a9b      	ldrh	r3, [r3, r2]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d172      	bne.n	8003a8a <UART_RxISR_16BIT+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a4:	f3ef 8310 	mrs	r3, PRIMASK
 80039a8:	617b      	str	r3, [r7, #20]
  return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
 80039ae:	2301      	movs	r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f383 8810 	msr	PRIMASK, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <UART_RxISR_16BIT+0x15c>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d2:	f3ef 8310 	mrs	r3, PRIMASK
 80039d6:	623b      	str	r3, [r7, #32]
  return(result);
 80039d8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
 80039dc:	2301      	movs	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f383 8810 	msr	PRIMASK, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	2101      	movs	r1, #1
 80039f2:	438a      	bics	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d12d      	bne.n	8003a70 <UART_RxISR_16BIT+0x138>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a20:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	2301      	movs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	2110      	movs	r1, #16
 8003a3a:	438a      	bics	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d103      	bne.n	8003a5e <UART_RxISR_16BIT+0x126>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2258      	movs	r2, #88	; 0x58
 8003a62:	5a9a      	ldrh	r2, [r3, r2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0011      	movs	r1, r2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff f90b 	bl	8002c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a6e:	e00c      	b.n	8003a8a <UART_RxISR_16BIT+0x152>
        HAL_UART_RxCpltCallback(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fc ff8e 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 8003a78:	e007      	b.n	8003a8a <UART_RxISR_16BIT+0x152>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6992      	ldr	r2, [r2, #24]
 8003a84:	2108      	movs	r1, #8
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b010      	add	sp, #64	; 0x40
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	fffffedf 	.word	0xfffffedf

08003a98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003aa8:	480d      	ldr	r0, [pc, #52]	; (8003ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aac:	480d      	ldr	r0, [pc, #52]	; (8003ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003aae:	490e      	ldr	r1, [pc, #56]	; (8003ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <LoopForever+0xe>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab4:	e002      	b.n	8003abc <LoopCopyDataInit>

08003ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aba:	3304      	adds	r3, #4

08003abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac0:	d3f9      	bcc.n	8003ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ac4:	4c0b      	ldr	r4, [pc, #44]	; (8003af4 <LoopForever+0x16>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac8:	e001      	b.n	8003ace <LoopFillZerobss>

08003aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003acc:	3204      	adds	r2, #4

08003ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad0:	d3fb      	bcc.n	8003aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ad2:	f7fd f877 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f000 f811 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ada:	f7fc fcd5 	bl	8000488 <main>

08003ade <LoopForever>:

LoopForever:
    b LoopForever
 8003ade:	e7fe      	b.n	8003ade <LoopForever>
  ldr   r0, =_estack
 8003ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003aec:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8003af0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003af4:	20000170 	.word	0x20000170

08003af8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC1_COMP_IRQHandler>
	...

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	2600      	movs	r6, #0
 8003b00:	4d0c      	ldr	r5, [pc, #48]	; (8003b34 <__libc_init_array+0x38>)
 8003b02:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	2600      	movs	r6, #0
 8003b0e:	f000 f821 	bl	8003b54 <_init>
 8003b12:	4d0a      	ldr	r5, [pc, #40]	; (8003b3c <__libc_init_array+0x40>)
 8003b14:	4c0a      	ldr	r4, [pc, #40]	; (8003b40 <__libc_init_array+0x44>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	00b3      	lsls	r3, r6, #2
 8003b22:	58eb      	ldr	r3, [r5, r3]
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	00b3      	lsls	r3, r6, #2
 8003b2c:	58eb      	ldr	r3, [r5, r3]
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003be0 	.word	0x08003be0
 8003b38:	08003be0 	.word	0x08003be0
 8003b3c:	08003be0 	.word	0x08003be0
 8003b40:	08003be4 	.word	0x08003be4

08003b44 <memset>:
 8003b44:	0003      	movs	r3, r0
 8003b46:	1882      	adds	r2, r0, r2
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	7019      	strb	r1, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
